[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction to programming for data science",
    "section": "",
    "text": "Preface\nThis book is currently being written for the course STAT201.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "Introduction to Jupyter Notebooks and programming in python.html",
    "href": "Introduction to Jupyter Notebooks and programming in python.html",
    "title": "1  Introduction to Jupyter Notebooks and programming in python",
    "section": "",
    "text": "1.1 Installation\nThis chapter is a very brief introduction to python and Jupyter notebooks. We only discuss the content relevant for applying python to analyze data.\nAnaconda: If you are new to python, we recommend downloading the Anaconda installer and following the instructions for installation. Once installed, we’ll use the Jupyter Notebook interface to write code.\nQuarto: We’ll use Quarto to publish the **.ipynb* file containing text, python code, and the output. Download and install Quarto from here.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction to Jupyter Notebooks and programming in python</span>"
    ]
  },
  {
    "objectID": "Introduction to Jupyter Notebooks and programming in python.html#jupyter-notebook",
    "href": "Introduction to Jupyter Notebooks and programming in python.html#jupyter-notebook",
    "title": "1  Introduction to Jupyter Notebooks and programming in python",
    "section": "1.2 Jupyter notebook",
    "text": "1.2 Jupyter notebook\n\n1.2.1 Introduction\nJupyter notebook is an interactive platform, where you can write code and text, and make visualizations. You can access Jupyter notebook from the Anaconda Navigator, or directly open the Jupyter Notebook application itself. It should automatically open up in your default browser. The figure below shows a Jupyter Notebook opened with Google Chrome. This page is called the landing page of the notebook.\n\n\n\n\n\nTo create a new notebook, click on the New button and select the Python 3 option. You should see a blank notebook as in the figure below.\n\n\n\n\n\n\n\n1.2.2 Writing and executing code\nCode cell: By default, a cell is of type Code, i.e., for typing code, as seen as the default choice in the dropdown menu below the Widgets tab. Try typing a line of python code (say, 2+3) in an empty code cell and execute it by pressing Shift+Enter. This should execute the code, and create an new code cell. Pressing Ctlr+Enter for Windows (or Cmd+Enter for Mac) will execute the code without creating a new cell.\nCommenting code in a code cell: Comments should be made while writing the code to explain the purpose of the code or a brief explanation of the tasks being performed by the code. A comment can be added in a code cell by preceding it with a # sign. For example, see the comment in the code below.\nWriting comments will help other users understand your code. It is also useful for the coder to keep track of the tasks being performed by their code.\n\n#This code adds 3 and 5\n3+5\n\n8\n\n\nMarkdown cell: Although a comment can be written in a code cell, a code cell cannot be used for writing headings/sub-headings, and is not appropriate for writing lengthy chunks of text. In such cases, change the cell type to Markdown from the dropdown menu below the Widgets tab. Use any markdown cheat sheet found online, for example, this one to format text in the markdown cells.\nGive a name to the notebook by clicking on the text, which says ‘Untitled’.\n\n\n1.2.3 Saving and loading notebooks\nSave the notebook by clicking on File, and selecting Save as, or clicking on the Save and Checkpoint icon (below the File tab). Your notebook will be saved as a file with an exptension ipynb. This file will contain all the code as well as the outputs, and can be loaded and edited by a Jupyter user. To load an existing Jupyter notebook, navigate to the folder of the notebook on the landing page, and then click on the file to open it.\n\n\n1.2.4 Rendering notebook as HTML\nWe’ll use Quarto to print the **.ipynb* file as HTML. Check the procedure for rendering a notebook as HTML here. You have several options to format the file. Here are some points to remember when using Quarto to render your notebook as HTML:\n\nThe Raw NBConvert cell type is used to render different code formats into HTML or LaTeX. This information is stored in the notebook metadata and converted appropriately. Use this cell type to put the desired formatting settings for the HTML file.\nIn the formatting settings, remember to use the setting embed-resources: true. This will ensure that the rendered HTML file is self-contained, and is not dependent on other files. This is especially important when you are sending the HTML file to someone, or uploading it somewhere. If the file is self-contained, then you can send the file by itself without having to attach the dependent files with it.\n\nOnce you have entered the desired formatting setting in the Raw NBConver cell, you are ready to render the notebook to HTML. Open the command prompt, navigate to the directory containing the notebook (.ipynb file), and use the command: quarto render filename.ipynb --to html.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction to Jupyter Notebooks and programming in python</span>"
    ]
  },
  {
    "objectID": "Introduction to Jupyter Notebooks and programming in python.html#in-class-exercise",
    "href": "Introduction to Jupyter Notebooks and programming in python.html#in-class-exercise",
    "title": "1  Introduction to Jupyter Notebooks and programming in python",
    "section": "1.3 In-class exercise",
    "text": "1.3 In-class exercise\n\nCreate a new notebook.\nSave the file as In_class_exercise_1.\nGive a heading to the file - First HTML file.\nPrint Today is day 1 of my programming course.\nCompute and print the number of seconds in a day.\n\nThe HTML file should look like the picture below.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction to Jupyter Notebooks and programming in python</span>"
    ]
  },
  {
    "objectID": "Introduction to Jupyter Notebooks and programming in python.html#python-libraries",
    "href": "Introduction to Jupyter Notebooks and programming in python.html#python-libraries",
    "title": "1  Introduction to Jupyter Notebooks and programming in python",
    "section": "1.4 Python libraries",
    "text": "1.4 Python libraries\nThere are several built-in functions in python like print(), abs(), max(), sum() etc., which do not require importing any library. However, these functions will typically be insufficient for a analyzing data. Some of the popular libraries in data science and their primary purposes are as follows:\n\nNumPy: Performing numerical operations and efficiently storing numerical data.\nPandas: Reading, cleaning and manipulating data.\nMatplotlib, Seaborn: Visualizing data.\nSciPy: Performing scientific computing such as solving differential equations, optimization, statistical tests, etc.\nScikit-learn: Data pre-processing and machine learning, with a focus on prediction.\nStatsmodels: Developing statistical models with a focus on inference\n\nA library can be imported using the import keyword. For example, a NumPy library can be imported as:\n\nimport numpy as np\n\nUsing the as keyword, the NumPy library has been given the name np. All the functions and attributes of the library can be called using the ‘np.’ prefix. For example, let us generate a sequence of whole numbers upto 10 using the NumPy function arange():\n\nnp.arange(8)\n\narray([0, 1, 2, 3, 4, 5, 6, 7])\n\n\nGenerating random numbers is very useful in python for performing simulations (we’ll see in later chapters). The library random is used to generate random numbers such as integers, real numbers based on different probability distributions, etc.\nBelow is an example of using the randint() function of the library for generating random numbers in [a, b], where a and b are integers.\n\nimport random as rm\nrm.randint(5,10) #This will generate a random number in [5,10]\n\n7",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction to Jupyter Notebooks and programming in python</span>"
    ]
  },
  {
    "objectID": "Introduction to Jupyter Notebooks and programming in python.html#debugging-and-errors",
    "href": "Introduction to Jupyter Notebooks and programming in python.html#debugging-and-errors",
    "title": "1  Introduction to Jupyter Notebooks and programming in python",
    "section": "1.5 Debugging and errors",
    "text": "1.5 Debugging and errors\nRead sections 1.3 - 1.6 from http://openbookproject.net/thinkcs/python/english3e/way_of_the_program.html",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction to Jupyter Notebooks and programming in python</span>"
    ]
  },
  {
    "objectID": "Introduction to Jupyter Notebooks and programming in python.html#terms-used-in-programming",
    "href": "Introduction to Jupyter Notebooks and programming in python.html#terms-used-in-programming",
    "title": "1  Introduction to Jupyter Notebooks and programming in python",
    "section": "1.6 Terms used in programming",
    "text": "1.6 Terms used in programming\nRead section 1.11 from http://openbookproject.net/thinkcs/python/english3e/way_of_the_program.html",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction to Jupyter Notebooks and programming in python</span>"
    ]
  },
  {
    "objectID": "Variable_expressions_statements.html",
    "href": "Variable_expressions_statements.html",
    "title": "2  Variables, expressions and statements",
    "section": "",
    "text": "2.1 Data types\nPython has several built-in data types for storing different kinds of information in variables.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Variables, expressions and statements</span>"
    ]
  },
  {
    "objectID": "Variable_expressions_statements.html#data-types",
    "href": "Variable_expressions_statements.html#data-types",
    "title": "2  Variables, expressions and statements",
    "section": "",
    "text": "2.1.1 Primitive\nInteger, float, boolean, None, and string are primitive data types because they represent a single value.\n\n\n2.1.2 Containers\nOther data types like list, tuple, and dictionary are often called data structures or containers because they hold multiple pieces of data together. We’ll discuss these datatypes in chapter 5.\nThe data type of the object can be identified using the in-built python function type(). For example, see the following objects and their types:\n\ntype(4)\n\nint\n\n\n\ntype(4.4)\n\nfloat\n\n\n\ntype('4')\n\nstr\n\n\n\ntype(True)\n\nbool\n\n\n\n\n2.1.3 Practice exercise 1\nWhat is the datatype of the following objects?\n\n‘This is False’\n“This is a number”\n1000\n65.65\nFalse",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Variables, expressions and statements</span>"
    ]
  },
  {
    "objectID": "Variable_expressions_statements.html#constants-and-variables",
    "href": "Variable_expressions_statements.html#constants-and-variables",
    "title": "2  Variables, expressions and statements",
    "section": "2.2 Constants and Variables",
    "text": "2.2 Constants and Variables\nA constant is a value that cannot be changed. It may be a number, string or any other datatype. Below are some examples of printing a constant:\n\nprint(4)\n\n4\n\n\n\nprint(\"This is a string and also a constant\")\n\nThis is a string and also a constant\n\n\n\nprint(False)\n\nFalse\n\n\nA variable is an object whose value can be changed. For example, consider the object below:\n\nx = 2\n\nIn the above code the variable x has been assigned a value of 2. However, the value of x can be changed:\n\nx = 3\nprint(\"x =\", x)\n\nx = 3\n\n\nThus, the object x in the above code is a variable that refers to a memory location storing the constant value of 3.\n\n2.2.1 Variable names\nThere are a some rules for naming variables:\n\nA variable name must start with a letter or underscore _\nA variable name may consist of letters, numbers, and underscores only\n\nFor example, some of the valid variable names are salary, text10, _varname. Some of the invalid variable names are salary%, 10text, varname).\n\nVariable names are case-sensitive. For example, the variable Varname will be different from varname.\nThere are certain reserved words in python that have some meaning, and cannot be used as variable names. These reserved words are:\n\n\n\n\n\n\nBest coding practice: Variables should be named such that they are informative of the value they are storing. For example, suppose we wish to compute the income tax a person has to pay based on their income and tax rate. Below are two ways of naming variables to do this computation:\n\nincome = 80000\ntax_rate = 0.15\nprint(\"Income tax = \", income*tax_rate)\n\nIncome tax =  12000.0\n\n\n\na = 80000\nb = 0.15\nprint(\"Income tax = \",a*b)\n\nIncome tax =  12000.0\n\n\nThe former code chunk is better than the latter one as it makes the code easy to read and understand.\nPython style guide: Please refer to the python style guide for best coding practices, such as naming variables, using spaces, tabs, and styling the different components of your code.\n\n\n2.2.2 Practice exercise 2\n\n2.2.2.1 Variables or constants?\nIn the statements below, classify the objects as variables or constants?\n\nvalue = “name”\nconstant = 7\nanother_const = “variable”\nTrue_False = True\n\n\n\n2.2.2.2 Valid variable names?\nWhich of the following variable names are valid?\n\nvar.name\nvar9name\n_varname\nvarname*",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Variables, expressions and statements</span>"
    ]
  },
  {
    "objectID": "Variable_expressions_statements.html#assignment-statements",
    "href": "Variable_expressions_statements.html#assignment-statements",
    "title": "2  Variables, expressions and statements",
    "section": "2.3 Assignment statements",
    "text": "2.3 Assignment statements\nValues are assigned to variables with the assignment statement (=). An assignment statement may have a constant or an expression on the right hand side of the (=) sign, and a variable name on the left hand side.\nFor example, the code lines below are assignment statements\n\nvar = 2\nvar = var + 3",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Variables, expressions and statements</span>"
    ]
  },
  {
    "objectID": "Variable_expressions_statements.html#expressions",
    "href": "Variable_expressions_statements.html#expressions",
    "title": "2  Variables, expressions and statements",
    "section": "2.4 Expressions",
    "text": "2.4 Expressions\nThe mathematical operations and their corresponding operators are as follows:\n\nExponent: **\nRemainder: %\nMultiplication: *\nDivision: /\nAddition: +\nSubtraction: -\n\nThe operators above are in decreasing order of precedence, i.e., an exponent will be evaluated before a remainder, a remainder will be evaluated before a multiplication, and so on.\nFor example, check the precedence of operators in the computation of the following expression:\n\n2+3%4*2\n\n8\n\n\nIn case an expression becomes too complicated, use of parenthesis may help clarify the precendence of operators. Parenthesis takes precendence over all the operators listed above. For example, in the expression below, the terms within parenthesis are evaluated first:\n\n2+3%(4*2)\n\n5\n\n\n\n2.4.1 Practice exercise 3\nWhich of the following statements is an assignment statement:\n\nx = 5\nprint(x)\ntype(x)\nx + 4\n\nWhat will be the result of the following expression:\n\n1%2**3*2+1",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Variables, expressions and statements</span>"
    ]
  },
  {
    "objectID": "Variable_expressions_statements.html#converting-datatypes",
    "href": "Variable_expressions_statements.html#converting-datatypes",
    "title": "2  Variables, expressions and statements",
    "section": "2.5 Converting datatypes",
    "text": "2.5 Converting datatypes\nSometimes a value may have a datatype that is not suitable for using it. For example, consider the variable called annual_income in the code below:\n\nannual_income = \"80000\"\n\nSuppose we wish to divide annual_income by 12 to get the monthly income. We cannot use the variable monthly_income directly as its datatype is a string and not a number. Thus, numerical operations cannnot be performed on the variable annual_income.\nWe’ll need to convert annual_income to an integer. For that we will use the python’s in-built int() function:\n\nannual_income = int(annual_income)\nmonthly_income = annual_income/12\nprint(\"monthly income = \", monthly_income)\n\nmonthly income =  6666.666666666667\n\n\nSimilarly, datatypes can be converted from one type to another using in-built python functions as shown below:\n\n#Converting integer to string\nstr(9)\n\n'9'\n\n\n\n#Converting string to float\nfloat(\"4.5\")\n\n4.5\n\n\n\n#Converting bool to integer\nint(True)\n\n1\n\n\nSometimes, conversion of a value may not be possible. For example, it is not possible to convert the variable greeting defined below to a number:\n\ngreeting = \"hello\"\n\nHowever, in some cases, mathematical operators such as + and * can be applied on strings. The operator + concatenates multiple strings, while the operator * can be used to concatenate a string to itself multiple times:\n\n\"Hi\" + \" there!\"\n\n'Hi there!'\n\n\n\n\"5\" + '3'\n\n'53'\n\n\n\n\"5\"*8\n\n'55555555'",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Variables, expressions and statements</span>"
    ]
  },
  {
    "objectID": "Variable_expressions_statements.html#user-input",
    "href": "Variable_expressions_statements.html#user-input",
    "title": "2  Variables, expressions and statements",
    "section": "2.6 User input",
    "text": "2.6 User input\nPython’s in-built input() function can be used to accept an input from the user. For example, suppose we wish the user to onput their age:\n\nage = input(\"Enter your age:\")\n\nEnter your age:34\n\n\nThe entered value is stored in the variable age and can be used for computation.\n\n2.6.1 Practice exercise 4\nAsk the user to input their year of birth, and print their age.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Variables, expressions and statements</span>"
    ]
  },
  {
    "objectID": "Variable_expressions_statements.html#commenting-code",
    "href": "Variable_expressions_statements.html#commenting-code",
    "title": "2  Variables, expressions and statements",
    "section": "2.7 Commenting code",
    "text": "2.7 Commenting code\nThe # symbol can be used to comment the code. Anything after the # sign is ignored by python. Commenting a code may have several purposes, such as:\n\nDescribe what is going to happen in a sequence of code\nDocument who wrote the code or other ancillary information\nTurn off a line of code - perhaps temporarily\n\nFor example, below is code with a comment to describe the purpose of the code:\n\n#Computing number of hours of lecture in this course\nprint(\"Total lecture hours of STAT201=\",10*3*(5/6))\n\nTotal lecture hours of STAT201= 25.0\n\n\n\n2.7.1 Practice exercise 5\nWhich of the following lines is a comment:\n\n#this is a comment\n##this may be a comment\nA comment#",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Variables, expressions and statements</span>"
    ]
  },
  {
    "objectID": "Variable_expressions_statements.html#programming-errors",
    "href": "Variable_expressions_statements.html#programming-errors",
    "title": "2  Variables, expressions and statements",
    "section": "2.8 Programming errors",
    "text": "2.8 Programming errors\nThere are 3 types of errors that can occur in a program - syntax errors, run-time errors, and semantic errors.\n\n2.8.1 Syntax errors\nSyntax errors occur if the code is written in a way that it does not comply with the rules / standards / laws of the language (python in this case). For example, suppose a values is assigned to a variable as follows:\n\n9value = 2\n\nThe above code when executed will indicate a syntax error as it violates the rule that a variable name must not start with a number.\n\n\n2.8.2 Run-time errors\nRun-time errors occur when a code is syntactically correct, but there are other issues with the code such as:\n\nMisspelled or incorrectly capitalized variable and function names\nAttempts to perform operations (such as math operations) on data of the wrong type (ex. attempting to subtract two variables that hold string values)\nDividing by zero\nAttempts to use a type conversion function such as int on a value that can’t be converted to an int\n\nFor example, suppose a number is multipled as follws:\n\nmultiplication_result = x * 4\n\nThe above code is syntactically correct. However, it will generate an error as the variable x has not been defined as a number.\n\n\n2.8.3 Semantic errors\nSemantic errors occur when the code executes without an error being indicated by the compiler. However, it does not work as inteded by the user. For example, consider the following code of mutiplying the number 6 by 3:\n\nx = '6'\nx * 3\n\n'666'\n\n\nIf it was intended to multiply the number 6, then the variable x should have been defined as x=6 so that x has a value of type integer. However, in the above code 6 is a string type value. When a string is multiplied by an integer, say n, it concatenates with itself n times.\n\n\n2.8.4 Practice exercise 6\nSuppose we wish to compute tax using the income and the tax rate. Identify the type of error from amongst syntax error, semantic error and run-time error in the following pieces of code.\n\nincome = 2000\ntax = .08 * Income\nprint(\"tax on\", income, \"is:\", tax)\n\n\nincome = 2000\ntax = .08 x income\nprint(\"tax on\", income, \"is:\", tax)\n\n\nincome = 2000\ntax = .08 ** income\nprint(\"tax on\", income, \"is:\", tax)",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Variables, expressions and statements</span>"
    ]
  },
  {
    "objectID": "Variable_expressions_statements.html#practice-exercise-7",
    "href": "Variable_expressions_statements.html#practice-exercise-7",
    "title": "2  Variables, expressions and statements",
    "section": "2.9 Practice exercise 7",
    "text": "2.9 Practice exercise 7\nThe formula for computing final amount if one is earning compund interest is given by: \\[A = P\\bigg(1+\\frac{r}{n}\\bigg)^{nt},\\]\nwhere:\nP = Principal amount (initial investment),\nr = annual nominal interest rate,\nn = number of times the interest is computed per year,\nt = number of years\nWrite a Python program that assigns the principal amount of $10000 to variable P, assign to n the value 12, and assign to r the interest rate of 8%. Then have the program prompt the user for the number of years t that the money will be compounded for. Calculate and print the final amount after t years.\nWhat is the amount if the user enters t as 4 years?",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Variables, expressions and statements</span>"
    ]
  },
  {
    "objectID": "Control flow.html",
    "href": "Control flow.html",
    "title": "3  Control flow statements",
    "section": "",
    "text": "3.1 Conditonal execution\nA control flow statement in a computer program determines the individual lines of code to be executed and/or the order in which they will be executed. In this chapter, we’ll learn about 3 types of control flow statements:\nThe first type of control flow satement is if-elif-else. This statement helps with conditional execution of code, i.e., the piece of code to be executed is selected based on certain condition(s).",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Control flow statements</span>"
    ]
  },
  {
    "objectID": "Control flow.html#conditonal-execution",
    "href": "Control flow.html#conditonal-execution",
    "title": "3  Control flow statements",
    "section": "",
    "text": "3.1.1 Comparison operators\nFor testing if conditions are true or false, first we need to learn the operators that can be used for comparison. For example, suppose we want to check if two objects are equal, we use the == operator:\n\n5 == 6\n\nFalse\n\n\n\nx = \"hi\"\ny = \"hi\"\nx == y\n\nTrue\n\n\nBelow are the python comparison operators and their meanings.\n\n\n\nPython code\nMeaning\n\n\n\n\nx == y\nProduce True if … x is equal to y\n\n\nx != y\n… x is not equal to y\n\n\nx &gt; y\n… x is greater than y\n\n\nx &lt; y\n… x is less than y\n\n\nx &gt;= y\n… x is greater than or equal to y\n\n\nx &lt;= y\n… x is less than or equal to y\n\n\n\n\n\n3.1.2 Logical operators\nSometimes we may need to check multiple conditions simultaneously. The logical operator and is used to check if all the conditions are true, while the logical operator or is used to check if either of the conditons is true.\n\n#Checking if both the conditions are true using 'and'\n5 == 5 and 67 == 68\n\nFalse\n\n\n\n#Checking if either condition is true using 'or'\nx = 6; y = 90\nx &lt; 0 or y &gt; 50\n\nTrue\n\n\n\n\n3.1.3 if-elif-else statement\nThe if-elif-else statements can check several conditions, and execute the code corresponding to the condition that is true. Note that there can be as many elif statements as required.\nSyntax: Python uses indentation to identify the code to be executed if a condition is true. All the code indented within a condition is executed if the condition is true.\nExample: Input an integer. Print whether it is positive or negative.\n\nnumber = input(\"Enter a number:\")  #Input an integer\nnumber_integer = int(number)       #Convert the integer to 'int' datatype\nif number_integer &gt; 0:               #Check if the integer is positive\n    print(\"Number is positive\")\nelse:\n    print(\"Number is negative\")\n\nEnter a number:-9\nNumber is negative\n\n\nIn the above code, note that anything entered by the user is taken as a string datatype by python. However, a string cannot be positive or negative. So, we converted the number input by the user to integer to check if it was positive or negative.\nThere may be multiple statements to be executed if a condition is true. See the example below.\nExample: Input a number. Print whether it is positive, negative or zero. If it is negative, print its absolute value.\n\nnumber = input(\"Enter a number:\")\nnumber_integer = int(number)\nif number_integer &gt; 0:\n    print(\"Number is positive\")\nelif number_integer == 0:\n    print(\"Number is zero\")\nelse:\n    print(\"Number is negative\")\n    print(\"Absolute value of number = \", abs(number_integer))\n\nEnter a number:0\nNumber is zero\n\n\n\n\n3.1.4 Practice exercise 1\nInput a number. Print whether its odd or even.\nSolution:\n\nnum = int(input(\"Enter a number: \"))\nif num%2 == 0:           #Checking if the number is divisible by 2\n    print(\"Number is even\")\nelse:\n    print(\"Number is odd\")\n\nEnter a number: 5\nNumber is odd\n\n\n\n\n3.1.5 Try-except\nIf we suspect that some lines of code may produce an error, we can put them in a try block, and if an error does occur, we can use the except block to instead execute an alternative piece of code. This way the program will not stop if an error occurs within the try block, and instead will be directed to execute the code within the except block.\nExample: Input an integer from the user. If the user inputs a valid integer, print whether it is a multiple of 3. However, if the user does not input a valid integer, print a message saying that the input is invalid.\n\nnum = input(\"Enter an integer:\")\n\n#The code lines within the 'try' block will execute as long as they run without error  \ntry:\n    #Converting the input to integer, as user input is a string\n    num_int = int(num)  \n    \n    #checking if the integer is a multiple of 3\n    if num_int % 3 == 0:            \n        print(\"Number is a multiple of 3\")\n    else:\n        print(\"Number is not a multiple of 3\")\n        \n#The code lines within the 'except' block will execute only if the code lines within the 'try' block throw an error        \nexcept:\n    print(\"Input must be an integer\")\n\nEnter an integer:hi\nInput must be an integer\n\n\n\n\n3.1.6 Practice exercise 2\n\n3.1.6.1 \nAsk the user to enter their exam score. Print the grade based on their score as follows:\n\n\n\nScore\nGrade\n\n\n\n\n(90,100]\nA\n\n\n(80,90]\nB\n\n\n[0,80]\nC\n\n\n\nIf the user inputs a score which is not a number in [0,100], print invalid entry.\nSolution:\n\nscore = input(\"Enter exam score:\")\ntry:\n    \n    #As exam score can be a floating point number (such as 90.65), we need to use 'float' instead of 'int' to convert the user input to a floating point number\n    score_num = float(score)\n    if score_num &gt; 90 and score_num &lt;= 100:\n        print(\"Grade: A\")\n    elif score_num &gt; 80 and score_num &lt;= 90:\n        print(\"Grade: B\")\n    elif score_num &gt;= 0 and score_num &lt;= 80:\n        print(\"Grade: C\")\n    else:\n        print(\"Invalid score\")     #If a number is less than 0 or more than 100\nexcept:\n    print(\"Invalid input\")         #If the input is not a number\n\nEnter exam score:90\nGrade: B\n\n\n\n\n3.1.6.2 \nNested if-elif-else statements: This question will lead you to create nested if statements, i.e., an if statement within another if statement.\nThink of a number in [1,5]. Ask the user to guess the number.\n\nIf the user guesses the number correctly, print “Correct in the first attempt!”, and stop the program. Otherwise, print “Incorrect! Try again” and give them another chance to guess the number.\nIf the user guesses the number correctly in the second attempt, print “Correct in the second attempt”, otherwise print “Incorrect in both the attempts, the correct number is:”, and print the correct number.\n\nSolution:\n\n#Let us say we think of the number. Now the user has to guess the number in two attempts.\nrand_no = 3\nguess = input(\"Guess the number:\")\nif int(guess)==rand_no:\n    print(\"Correct in the first attempt!\")\n    \n#If the guess is incorrect, the program will execute the code block below    \nelse:    \n    guess = input(\"Incorrect! Try again:\")\n    if int(guess) == rand_no:\n        print(\"Correct in the second attempt\")\n    else:\n        print(\"Incorrect in the both the attempts, the correct number was:\", rand_no)",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Control flow statements</span>"
    ]
  },
  {
    "objectID": "Control flow.html#loops",
    "href": "Control flow.html#loops",
    "title": "3  Control flow statements",
    "section": "3.2 Loops",
    "text": "3.2 Loops\nWith loops, a piece of code can be executed repeatedly for a fixed number of times or until a condition is satistified.\n\n3.2.1 for loop\nWith a for loop, a piece of code is executed a fixed number of times.\nWe typically use for loops with an in-built python function called range() that supports for loops. Below is its description.\nrange(): The range() function creates an iterative object that represents an immutable sequence of numbers and is commonly used for looping a specific number of times in for loops.\nThe advantage of the range type over a regular list or tuple is that a range object will always take the same (small) amount of memory, no matter the size of the range it represents (as it only stores the start, stop and step values, calculating individual items and subranges as needed).\nBelow is an example where the range() function is used to print over integers from 0 to 4.\n\nfor i in range(5):\n    print(i)\n\n0\n1\n2\n3\n4\n\n\nNote that the range function itself doesn’t store the list of integers from 0 to 4; it is more memory-efficient by generating values on the fly.\nNote that the last element is one less than the integer specified in the range() function.\nUsing the range() function, the for loop can iterate over a sequence of numbers. See the example below.\nExample: Print the first n elements of the Fibonacci sequence, where n is an integer input by the user, such that n&gt;2. In a fibonacci sequence, each number is the sum of the preceding two numbers, and the sequence starts from 0,1. The sequence is as follows:\n0,1,1,2,3,5,8,13,….\n\nn = int(input(\"Enter number of elements:\"))\n\n#Initializing the sequence to start from 0, 1\nn1 = 0;n2 = 1\n\n#Printing the first two numbers of the sequence\nprint(n1)\nprint(n2)\n\nfor i in range(n-2):  #Since two numbers of the sequence are already printed, n-2 numbers are required\n    \n    #Computing the next number of the sequence as the summation of the previous two numbers\n    n3 = n1 + n2\n    print(n3)\n    \n    #As 'n3' is already printed, it is no longer the next number of the sequence. \n    #Thus, we move the values of the variables n1 and n2 one place to the right to compute the next number of the sequence.\n    n1 = n2\n    n2 = n3  \n    \nprint(\"These are the first\", n, \"elements of the fibonacci series\")\n\nEnter number of elements:6\n0\n1\n1\n2\n3\n5\nThese are the first 6 elements of the fibonacci series\n\n\nAs in the if-elif-else statement, the for loop uses identation to indicate the piece of code to be run repeatedly.\nNote that we have used an in-built python function\n\n\n3.2.2 while loop\nWith a while loops, a piece of code is executed repeatedly until certain condition(s) hold.\nExample: Print all the elements of the Fibonacci sequence less than n, where n is an integer input by the user, such that n&gt;2. In a fibonacci sequence, each number is the sum of the preceding two numbers, and the sequence starts from 0,1. The sequence is as follows:\n0,1,1,2,3,5,8,13,….\n\nn = int(input(\"Enter the value of n:\"))\n\n#Initializing the sequence to start from 0, 1\nn1 = 0; n2 = 1\n\n#Printing the first number of the sequence\nprint(n1)\n\nwhile n2 &lt; n:\n    \n    #Print the next number of the sequence\n    print(n2)\n    \n    #Comptuing the next number of the sequence as the summation of the previous two numbers\n    n3 = n1 + n2\n    \n    #As n2 is already printed, assigning n2 to n3, so that the next number of the sequence (i.e., currently n3) is printed if the program enters the loop again\n    #Assigning n1 to n2 as n1 has already been used to compute the next number of the seqeunce (i.e., currently n3). \n    n1 = n2\n    n2 = n3  \nprint(\"These are all the elements of the fibonacci series less than\", n)\n\nEnter the value of n:50\n0\n1\n1\n2\n3\n5\n8\n13\n21\n34\nThese are all the elements of the fibonacci series less than 50\n\n\n\n\n3.2.3 Practice exercise 3\n\n3.2.3.1 \nWrite a program that identifies whether a number input by the user is prime or not.\nSolution:\n\nnumber = int(input(\"Enter a positive integer:\"))\n\n#Defining a variable that will have a value of 0 if there are no divisors\nnum_divisors = 0\n\n#Checking if the number has any divisors from 2 to half of the number\nfor divisor in range(2,int(number/2+1)):\n        if number % divisor == 0:\n            \n            #If the number has a divisor, setting num_divisors to 1, to indicate that the number is not prime\n            num_divisors = 1\n            \n            #If a divisor has been found, there is no need to check if the number has more divisors.\n            #Even if the number has a single divisor, it is not prime. Thus, we 'break' out of the loop that checks for divisors\n            #If you don't 'break', your code will still be correct, it will just do some unnecessary computations\n            break\n            \n#If there are no divisors of the number, it is prime, else not prime      \nif num_divisors == 0:\n    print(\"Prime\")   \nelse:\n    print(\"Not prime\")\n\nEnter a positive integer:97\nPrime\n\n\n\n\n3.2.3.2 \nUpdate the program above to print the prime numbers starting from 2, and less than n where n is a positive integer input by the user.\nSolution:\n\nn = int(input(\"Enter a positive integer:\"))\n\n#Defining a variable - number_iterator. We will use this variable to iterate over all integers from 2 to n, not including n.\n#While iterating over each integer from 2 to n, we will check if the integer is prime or not. If it is prime, it will be printed\nnumber_iterator = 2\n\nprint(number_iterator) #Since '2' is a prime number, we can print it directly (without checking)\n\n#Continue to check for prime numbers until n (but not including n)\nwhile(number_iterator &lt; n):\n    \n    #After each check, increment the number_iterator to check if the next integer is prime\n    number_iterator = number_iterator + 1\n    \n    #Defining a variable that will have a value of 0 if there are no divisors\n    num_divisors = 0\n    \n    #Checking if the integer has any divisors from 2 to half of the integer being checked \n    for divisor in range(2,int(number_iterator/2 + 1)):\n        if number_iterator % divisor == 0:\n            \n            #If the integer has a divisor, setting num_divisors to 1, to indicate that the number is not prime\n            num_divisors = 1\n            \n            #If a divisor has been found, there is no need to check if the integer has more divisors.\n            #Even if the integer has a single divisor, it is not prime. \n            #Thus, we 'break' out of the loop that checks for divisors\n            break\n            \n    #If there are no divisors of the integer being checked, the integer is a prime number, and we print it\n    if num_divisors == 0:\n        print(number_iterator)   \n\nEnter a positive integer:100\n2\n3\n5\n7\n11\n13\n17\n19\n23\n29\n31\n37\n41\n43\n47\n53\n59\n61\n67\n71\n73\n79\n83\n89\n97",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Control flow statements</span>"
    ]
  },
  {
    "objectID": "Control flow.html#break-statement",
    "href": "Control flow.html#break-statement",
    "title": "3  Control flow statements",
    "section": "3.3 break statement",
    "text": "3.3 break statement\nThe break statement is used to unconditionally exit the innermost loop.\nFor example, suppose we need to keep asking the user to input year of birth and compute the corresponding age, until the user enters 1900 as the year of birth.\n\n#The loop will continue to run indefinitely as the condition 'True' is always true\nwhile True:\n    year = int(input(\"Enter year of birth:\"))\n    if year == 1900:\n        break        #If the user inputs 1900, then break out of the loop\n    else:\n        print(\"Age = \", 2022 - year)    #Otherwise compute and print the age\n\nEnter year of birth:1987\nAge =  35\nEnter year of birth:1995\nAge =  27\nEnter year of birth:2001\nAge =  21\nEnter year of birth:1900\n\n\n\n3.3.1 Practice exercise 4\nWrite a program that finds and prints the largest factor of a number input by the user. Check the output if the user inputs 133.\nSolution:\n\nnum = int(input(\"Enter an integer:\"))\n\n#Looping from the half the integer to 0 as the highest factor is likely to be closer to half the integer value than 0\nfor i in range(int(num/2) + 1, 0, -1):\n    if num%i == 0:\n        print(\"Largest factor = \", i)\n        \n        #Exiting the loop if the largest integer is found\n        break\n\nEnter an integer:133\nLargest factor =  19",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Control flow statements</span>"
    ]
  },
  {
    "objectID": "Control flow.html#continue-statement",
    "href": "Control flow.html#continue-statement",
    "title": "3  Control flow statements",
    "section": "3.4 continue statement",
    "text": "3.4 continue statement\nThe continue statement is used to continue with the next iteration of the loop without executing the lines of code below it.\nFor example, consider the following code:\n\nfor i in range(10):\n    if i%2 == 0:\n        continue\n    print(i)\n\n1\n3\n5\n7\n9\n\n\nWhen the control flow reads the statement continue, it goes back to the beginning of the for loop, and ignores the lines of code below the statement.\n\n3.4.1 Practice exercise 5:\nWrite a program that asks the user the question, “How many stars are in the Milky Way (in billions)?”. If the user answers 100, the program should print correct, and stop. However, if the user answers incorrectly, the program should print “incorrect”, and ask them if they want to try again. The program should continue to run until the user answers correctly, or they want to stop trying.\n\n#Defining an infinite while loop as the loop may need to run indefinitely if the user keeps answering incorrectly and trying again\nwhile True:\n    answer = input(\"How many stars are there in the Milky Way? \")\n    if answer == '100':\n        print(\"Correct\")\n        \n        #Exiting the loop if the user answers correctly\n        break\n    else:\n        print(\"Incorrect\")\n        try_again = input(\"Do you want to try again? (Y/N) \")\n        if try_again == 'Y':\n            \n            #Continuing with the infinite loop if the user wants to try again\n            continue\n        else:\n            \n            #Exiting the infinite loop if the user wants to stop tryinh\n            break\n\nHow many stars are there in the Milky Way? 101\nIncorrect\nDo you want to try again? (Y/N) Y\nHow many stars are there in the Milky Way? 7\nIncorrect\nDo you want to try again? (Y/N) Y\nHow many stars are there in the Milky Way? 5\nIncorrect\nDo you want to try again? (Y/N) Y\nHow many stars are there in the Milky Way? 100\nCorrect",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Control flow statements</span>"
    ]
  },
  {
    "objectID": "Control flow.html#loops-with-strings",
    "href": "Control flow.html#loops-with-strings",
    "title": "3  Control flow statements",
    "section": "3.5 Loops with strings",
    "text": "3.5 Loops with strings\nLoops can be used to iterate over a string, just like we used them to iterate over a sequence of integers.\nConsider the following string:\n\nsentence = \"She sells sea shells on the sea shore\"\n\nThe \\(i^{th}\\) character of the string can be retrieved by its index. For example, the first character of the string sentence is:\n\nsentence[0]\n\n'S'\n\n\nSlicing a string:\nA part of the string can be sliced by passing the starting index (say start) and the stopping index (say stop) as start:stop to the index operator []. This is called slicing a string. For a string S, the characters starting from the index start upto the index stop, but not including stop, can be sliced as S[start:stop].\nFor example, the slice of the string sentence from index 4 to index 9, but not including 9 is:\n\nsentence[4:9]\n\n'sells'\n\n\nExample:\nInput a string, and count and print the number of “t”s.\n\nstring = input(\"Enter a sentence:\")\n\n#Initializing a variable 'count_t' which will store the number of 't's in the string\ncount_t = 0\n\n#Iterating over the entire length of the string. \n#The length of the string is given by the len() function\nfor i in range(len(string)):\n    \n    #If the ith character of the string is 't', then we count it\n    if string[i] == 't':\n        count_t = count_t + 1\n\nprint(\"Number of 't's in the string = \", count_t)\n\nEnter a sentence:Getting a tatto is not a nice experience\nNumber of 't's in the string =  6\n\n\n\n3.5.1 Practice exercise 6\nWrite a program that asks the user to input a string, and print the number of “the”s in the string.\n\nstring = input(\"Enter a sentence:\")\n\n#Defining a variable to store the count of the word 'the'\ncount_the = 0\n\n#Looping through the entire length of the string except the last 3 letters.\n#As we are checking three letters at a time starting from the index 'i', the last 3 letters of the string will be checked when 'i' is len(string)-3\nfor i in range(len(string) - 3):\n    \n    #Slicing 3 letters of the string and checking if they are 'the'\n    if string[i:(i+3)] == 'the':\n        \n        #Counting the words that are 'the'\n        count_the = count_the + 1\nprint(\"Number of 'the's in the string = \", count_the)\n\nEnter a sentence:She sells the sea shells on the sea shore in the spring\nNumber of 'the's in the string =  3",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Control flow statements</span>"
    ]
  },
  {
    "objectID": "functions2.html",
    "href": "functions2.html",
    "title": "4  Functions",
    "section": "",
    "text": "4.1 Introduction\nAs the words suggests, functions are a piece of code that have a specific function or purpose. As an analogy, if a human is a computer program, then the mind can be considered to be a function, which has purpose of thinking, eyes can be another function, which have a purpose of seeing. These functions are called upon by the human when needed.\nSimilarly, in case of a computer program, functions are a piece of code, that perform a specific task, when called upon by the program. Instead of being defined as a function, the piece of code can also be used directly whenever it is needed in a program. However, defining a frequently-used piece of code as a function has the following benefits:\nTo put it more formally, a function is a piece of code that takes arguments (if any) as input, performs computations or tasks, and then returns a result or results.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Functions</span>"
    ]
  },
  {
    "objectID": "functions2.html#introduction",
    "href": "functions2.html#introduction",
    "title": "4  Functions",
    "section": "",
    "text": "It reduces the number of lines of code, as the lines of code need to be written just once in the function definition. Thereafter, the function is called by its name, wherever needed in the program. This makes the code compact, and enhances readability.\nIt makes the process of writing code easier, as the user needs to just type the name of the function, wherever it is needed, instead of pasting lines of code.\nIt can be used in different programs, thereby saving time in writing other programs.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Functions</span>"
    ]
  },
  {
    "objectID": "functions2.html#defining-a-function",
    "href": "functions2.html#defining-a-function",
    "title": "4  Functions",
    "section": "4.2 Defining a function",
    "text": "4.2 Defining a function\nLook at the function defined below. It asks the user to input a number, and prints whether the number is odd or even.\n\n#This is an example of a function definition\n\n#A function definition begins with the 'def' keyword followed by the name of the function.\n#Note that 'odd_even()' is the name of the function below.\ndef odd_even():           \n    num = int(input(\"Enter an integer:\"))\n    if num%2==0:\n        print(\"Even\")\n    else:\n        print(\"Odd\")   #Function definition ends here\n        \nprint(\"This line is not a part of the function as it is not indented\") #This line is not a part of the function\n\nThis line is not a part of the function as it is not indented\n\n\nNote that the function is defined using the def keyword. All the lines within the function definition are indented. The indentation shows the lines of code that below to the function. When the indentation stops, the function definition is considered to have ended.\nWhenever the user wishes to input a number and print whether it is odd or even, they can call the function defined above by its name as follows:\n\nodd_even()\n\nEnter an integer:5\nOdd\n\n\nIn Python, empty parentheses are used when defining a function, even if it doesn’t take any parameters. This is a syntactic requirement to differentiate between variables and functions. It helps Python understand that you are defining a function, not just referencing a variable.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Functions</span>"
    ]
  },
  {
    "objectID": "functions2.html#parameters-and-arguments-of-a-function",
    "href": "functions2.html#parameters-and-arguments-of-a-function",
    "title": "4  Functions",
    "section": "4.3 Parameters and arguments of a function",
    "text": "4.3 Parameters and arguments of a function\nNote that the function defined above needs no input when called. However, sometimes we may wish to define a function that takes input(s), and performs computations on the inputs to produce an output. These input(s) are called parameter(s) of a function. When a function is called, the value(s) of these parameter(s) must be specified as argument(s) to the function.\n\n4.3.1 Function with a parameter\nLet us change the previous example to write a function that takes an integer as an input argument, and prints whether it is odd or even:\n\n#This is an example of a function definition that has an argument\ndef odd_even(num):           \n    if num%2==0:\n        print(\"Even\")\n    else:\n        print(\"Odd\")\n\nWe can use the function whenever we wish to find a number is odd or even. For example, if we wish to find that a number input by the user is odd or even, we can call the function with the user input as its argument.\n\nnumber = int(input(\"Enter an integer:\"))\nodd_even(number)\n\nEnter an integer:6\nEven\n\n\nNote that the above function needs an argument as per the function definition. It will produce an error if called without an argument:\n\nodd_even()\n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n&lt;ipython-input-8-d86a5f720e3b&gt; in &lt;module&gt;\n----&gt; 1 odd_even()\n\nTypeError: odd_even() missing 1 required positional argument: 'num'\n\n\n\n\n\n4.3.2 Function with a parameter having a default value\nTo avoid errors as above, sometimes is a good idea to assign a default value to the parameter in the function definition:\n\n#This is an example of a function definition that has an argument with a default value\ndef odd_even(num=0):           \n    if num%2==0:\n        print(\"Even\")\n    else:\n        print(\"Odd\")\n\nNow, we can call the function without an argument. The function will use the default value of the parameter specified in the function definition.\n\nodd_even()\n\nEven\n\n\n\n\n4.3.3 Function with multiple parameters\nA function can have as many parameters as needed. Multiple parameters/arguments are separated by commas. For example, below is a function that inputs two strings, concatenates them with a space in between, and prints the output:\n\ndef concat_string(string1, string2):\n    print(string1+' '+string2)\n\n\nconcat_string(\"Hi\", \"there\")\n\nHi there\n\n\n\n\n4.3.4 Practice exercise 1\nWrite a function that prints prime numbers between two real numbers - a and b, where a and b are the parameters of the function. Call the function and check the output with a = 60, b = 80.\nSolution:\n\ndef prime_numbers (a,b=100):\n    num_prime_nos = 0\n    \n    #Iterating over all numbers between a and b\n    for i in range(a,b):\n        num_divisors=0\n        \n        #Checking if the ith number has any factors\n        for j in range(2, i):\n            if i%j == 0:\n                num_divisors=1;break;\n                \n        #If there are no factors, then printing and counting the number as prime        \n        if num_divisors==0:\n            print(i)\nprime_numbers(60,80)\n\n61\n67\n71\n73\n79",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Functions</span>"
    ]
  },
  {
    "objectID": "functions2.html#functions-that-return-objects",
    "href": "functions2.html#functions-that-return-objects",
    "title": "4  Functions",
    "section": "4.4 Functions that return objects",
    "text": "4.4 Functions that return objects\nUntil now, we saw functions that print text. However, the functions did not return any object. For example, the function odd_even prints whether the number is odd or even. However, we did not save this information. In future, we may need to use the information that whether the number was odd or even. Thus, typically, we return an object from the function definition, which consists of the information we may need in the future.\nThe example odd_even can be updated to return the text “odd” or “even” as shown below:\n\n#This is an example of a function definition that has an argument with a default value, and returns an object\ndef odd_even(num=0):           \n    if num%2==0:\n        return(\"Even\")\n    else:\n        return(\"Odd\")\n\nThe function above returns a string “Odd” or “Even”, depending on whether the number is odd or even. This result can be stored in a variable, which can be used later.\n\nresponse=odd_even(3)\nresponse\n\n'Odd'\n\n\nThe variable response now refers to the object where the string “Odd” or “Even” is stored. Thus, the result of the computation is stored, and the variable can be used later on in the program. Note that the control flow exits the function as soon as the first return statement is executed.\nFigure 4.1 below shows the terminology associated with functions.\n\n\n\n\n\n\n\nFigure 4.1: Terminology associated with functions",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Functions</span>"
    ]
  },
  {
    "objectID": "functions2.html#global-and-local-variables-with-respect-to-a-function",
    "href": "functions2.html#global-and-local-variables-with-respect-to-a-function",
    "title": "4  Functions",
    "section": "4.5 Global and local variables with respect to a function",
    "text": "4.5 Global and local variables with respect to a function\nA variable defined within a function is local to that function, while a variable defined outside the function is global with respect to that function. In case a variable with the same name is defined both outside and inside a function, it will refer to its global value outside the function and local value within the function.\nThe example below shows a variable with the name var referring to its local value when called within the function, and global value when called outside the function.\n\nvar = 5\ndef sample_function(var):    \n    print(\"Local value of 'var' within 'sample_function()'= \",var)\n\nsample_function(4)\nprint(\"Global value of 'var' outside 'sample_function()' = \",var)\n\nLocal value of 'var' within 'sample_function()'=  4\nGlobal value of 'var' outside 'sample_function()' =  5",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Functions</span>"
    ]
  },
  {
    "objectID": "functions2.html#built-in-python-functions",
    "href": "functions2.html#built-in-python-functions",
    "title": "4  Functions",
    "section": "4.6 Built-in python functions",
    "text": "4.6 Built-in python functions\nSo far we have seen user-defined functions in this chapter. These functions were defined by us, and are not stored permanently in the python compiler. However, there are some functions that come built-in with python and we can use them directly without defining them. These built-in functions can be see here. For example the built-in function max() computes the max of numeric values:\n\nmax(1,2,3)\n\n3\n\n\nAnother example is the round() function that rounds up floating point numbers:\n\nround(3.7)\n\n4",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Functions</span>"
    ]
  },
  {
    "objectID": "functions2.html#python-libraries",
    "href": "functions2.html#python-libraries",
    "title": "4  Functions",
    "section": "4.7 Python libraries",
    "text": "4.7 Python libraries\nOther than the built-in functions, python has hundreds of thousands of libraries that contain several useful functions. These libraries are contributed by people around the world as python is an open-source platform. Some of the libraries popular in data science, and their purposes are the following:\n\nNumPy: Performing numerical operations and efficiently storing numerical data.\nPandas: Reading, cleaning and manipulating data.\nMatplotlib, Seaborn: Visualizing data.\nSciPy: Performing scientific computing such as solving differential equations, optimization, statistical tests, etc.\nScikit-learn: Data pre-processing and machine learning, with a focus on prediction.\nStatsmodels: Developing statistical models with a focus on inference\n\nA library can be imported using the import keyword. For example, a NumPy library can be imported as:\n\nimport numpy as np\n\nUsing the as keyboard, the NumPy library has been given the name np. All the functions and attributes of the library can be called using the ‘np.’ prefix. For example, let us generate a sequence of whole numbers upto 10 using the NumPy function arange():\n\nnp.arange(8)\n\narray([0, 1, 2, 3, 4, 5, 6, 7])\n\n\nGenerating random numbers is very useful in python for performing simulations (we’ll see in later chapters). The library random is used to generate random numbers such as integers, real numbers based on different probability distributions, etc.\nBelow is an example of using the randint() function of the library for generating random numbers in [a, b], where a and b are integers.\n\nimport random as rm\nrm.randint(5,10) #This will generate a random number in [5,10]\n\n7\n\n\n\n4.7.1 Practice exercise 2\nGenerate a random number between [-5,5]. Do this 10,000 times. Find the mean of all the 10,000 random numbers generated.\nSolution:\n\nimport random as rm\ncounter = 0\nfor i in range(10000):\n    counter = counter + rm.uniform(-5,5)\nprint(\"Mean is:\", counter/10000)\n\nMean is: 0.061433810226516616",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Functions</span>"
    ]
  },
  {
    "objectID": "data_structures-complete.html",
    "href": "data_structures-complete.html",
    "title": "5  Data structures",
    "section": "",
    "text": "5.1 Tuple\nIn this chapter we’ll learn about the python data structures that are often used or appear while analyzing data.\nTuple is a sequence of python objects, with two key characeterisics: (1) the number of objects are fixed, and (2) the objects are immutable, i.e., they cannot be changed.\nTuple can be defined as a sequence of python objects separated by commas, and enclosed in rounded brackets (). For example, below is a tuple containing three integers.\ntuple_example = (2,7,4)\nTuple can be defined without the rounded brackets as well:\ntuple_example = 2, 7, 4\nWe can check the data type of a python object using the type() function. Let us check the data type of the object tuple_example.\ntype(tuple_example)\n\ntuple\nElements of a tuple can be extracted using their index within square brackets. For example the second element of the tuple tuple_example can be extracted as follows:\ntuple_example[1]\n\n7\nNote that an element of a tuple cannot be modified. For example, consider the following attempt in changing the second element of the tuple tuple_example.\ntuple_example[1] = 8\n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n&lt;ipython-input-6-6ceb38adde52&gt; in &lt;module&gt;\n----&gt; 1 tuple_example[1] = 8\n\nTypeError: 'tuple' object does not support item assignment\nThe above code results in an error as tuple elements cannot be modified.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Data structures</span>"
    ]
  },
  {
    "objectID": "data_structures-complete.html#tuple",
    "href": "data_structures-complete.html#tuple",
    "title": "5  Data structures",
    "section": "",
    "text": "5.1.1 Practice exercise 1\nUSA’s GDP per capita from 1960 to 2021 is given by the tuple T in the code cell below. The values are arranged in ascending order of the year, i.e., the first value is for 1960, the second value is for 1961, and so on. Print the years in which the GDP per capita of the US increased by more than 10%.\n\nT = (3007, 3067, 3244, 3375,3574, 3828, 4146, 4336, 4696, 5032,5234,5609,6094,6726,7226,7801,8592,9453,10565,11674,12575,13976,14434,15544,17121,18237,19071,20039,21417,22857,23889,24342,25419,26387,27695,28691,29968,31459,32854,34515,36330,37134,37998,39490,41725,44123,46302,48050,48570,47195,48651,50066,51784,53291,55124,56763,57867,59915,62805,65095,63028,69288)\n\nSolution:\n\n#Iterating over each element of the tuple\nfor i in range(len(T)-1):\n    \n    #Computing percentage increase in GDP per capita in the (i+1)th year\n    increase = (T[i+1]-T[i])/T[i]\n    \n    #Printing the year if the increase in GDP per capita is more than 10%\n    if increase&gt;0.1:\n        print(i+1961)\n\n1973\n1976\n1977\n1978\n1979\n1981\n1984\n\n\n\n\n5.1.2 Concatenating tuples\nTuples can be concatenated using the + operator to produce a longer tuple:\n\n(2,7,4) + (\"another\", \"tuple\") + (\"mixed\",\"datatypes\",5)\n\n(2, 7, 4, 'another', 'tuple', 'mixed', 'datatypes', 5)\n\n\nMultiplying a tuple by an integer results in repetition of the tuple:\n\n(2,7,\"hi\") * 3\n\n(2, 7, 'hi', 2, 7, 'hi', 2, 7, 'hi')\n\n\n\n\n5.1.3 Unpacking tuples\nIf tuples are assigned to an expression containing multiple variables, the tuple will be unpacked and each variable will be assigned a value as per the order in which it appears. See the example below.\n\nx,y,z  = (4.5, \"this is a string\", ((\"Nested tuple\",5)))\n\n\nx\n\n4.5\n\n\n\ny\n\n'this is a string'\n\n\n\nz\n\n('Nested tuple', 5)\n\n\nIf we are interested in retrieving only some values of the tuple, the expression *_ can be used to discard the other values. Let’s say we are interested in retrieving only the first and the last two values of the tuple:\n\nx,*_,y,z  = (4.5, \"this is a string\", ((\"Nested tuple\",5)),\"99\",99)\n\n\nx\n\n4.5\n\n\n\ny\n\n'99'\n\n\n\nz\n\n99\n\n\n\n\n5.1.4 Practice exercise 2\nUSA’s GDP per capita from 1960 to 2021 is given by the tuple T in the code cell below. The values are arranged in ascending order of the year, i.e., the first value is for 1960, the second value is for 1961, and so on.\nWrite a function that has two parameters:\n\nYear : which indicates the year from which the GDP per capita are available in the second parameter\nTuple of GDP per capita’s: Tuple consisting of GDP per capita for consecutive years starting from the year mentioned in the first parameter.\n\nThe function should return a tuple of length two, where the first element of the tuple is the number of years when the increase in GDP per capita was more than 5%, and the second element is the most recent year in which the GDP per capita increase was more than 5%.\nCall the function to find the number of years, and the most recent year in which the GDP per capita increased by more than 5%, since the year 2000. Assign the number of years returned by the function to a variable named num_years, and assign the most recent year to a variable named recent_year. Print the values of num_years and recent_year.\n\nT = (3007, 3067, 3244, 3375,3574, 3828, 4146, 4336, 4696, 5032,5234,5609,6094,6726,7226,7801,8592,9453,10565,11674,12575,13976,14434,15544,17121,18237,19071,20039,21417,22857,23889,24342,25419,26387,27695,28691,29968,31459,32854,34515,36330,37134,37998,39490,41725,44123,46302,48050,48570,47195,48651,50066,51784,53291,55124,56763,57867,59915,62805,65095,63028,69288)\n\n\ndef gdp_inc(year,gdp_tuple):\n    count=0\n    for i in range(len(gdp_tuple)-1):\n        \n        #Computing the increase in GDP per capita for the (i+1)th year\n        increase = (gdp_tuple[i+1]-gdp_tuple[i])/gdp_tuple[i]\n        if increase&gt;0.05:\n            print(year+i)\n            \n            #Over-writing the value of recent_year if the increase in GDP per capita for a more recent year is more than 5%\n            recent_year = year+i+1\n            \n            #Counting the number of years for which the increase in GDP per capita is more than 5%\n            count = count+1\n    return((count,recent_year))\n\nnum_years, recent_year = gdp_inc(2000,T[40:])\nprint(\"Number of years when increase in GDP per capita was more than 5% = \", num_years)\nprint(\"The most recent year in which the increase in GDP per capita was more than 5% = \", recent_year)\n\n2003\n2004\n2020\nNumber of years when increase in GDP per capita was more than 5% =  3\nThe most recent year in which the increase in GDP per capita was more than 5% =  2021\n\n\n\n\n5.1.5 Tuple methods\nA couple of useful tuple methods are count, which counts the occurences of an element in the tuple and index, which returns the position of the first occurance of an element in the tuple:\n\ntuple_example = (2,5,64,7,2,2)\n\n\ntuple_example.count(2)\n\n3\n\n\n\ntuple_example.index(2)\n\n0\n\n\nNow that we have an idea about tuple, let us try to think where it can be used.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Data structures</span>"
    ]
  },
  {
    "objectID": "data_structures-complete.html#list",
    "href": "data_structures-complete.html#list",
    "title": "5  Data structures",
    "section": "5.2 List",
    "text": "5.2 List\nList is a sequence of python objects, with two key characeterisics that differentiates it from tuple: (1) the number of objects are variable, i.e., objects can be added or removed from a list, and (2) the objects are mutable, i.e., they can be changed.\nList can be defined as a sequence of python objects separated by commas, and enclosed in square brackets []. For example, below is a list consisting of three integers.\n\nlist_example = [2,7,4]\n\n\n5.2.1 Adding and removing elements in a list\nWe can add elements at the end of the list using the append method. For example, we append the string ‘red’ to the list list_example below.\n\nlist_example.append('red')\n\n\nlist_example\n\n[2, 7, 4, 'red']\n\n\nNote that the objects of a list or a tuple can be of different datatypes.\nAn element can be added at a specific location of the list using the insert method. For example, if we wish to insert the number 2.32 as the second element of the list list_example, we can do it as follows:\n\nlist_example.insert(1,2.32)\n\n\nlist_example\n\n[2, 2.32, 7, 4, 'red']\n\n\nFor removing an element from the list, the pop and remove methods may be used. The pop method removes an element at a particular index, while the remove method removes the element’s first occurence in the list by its value. See the examples below.\nLet us say, we need to remove the third element of the list.\n\nlist_example.pop(2)\n\n7\n\n\n\nlist_example\n\n[2, 2.32, 4, 'red']\n\n\nLet us say, we need to remove the element ‘red’.\n\nlist_example.remove('red')\n\n\nlist_example\n\n[2, 2.32, 4]\n\n\n\n#If there are multiple occurences of an element in the list, the first occurence will be removed\nlist_example2 = [2,3,2,4,4]\nlist_example2.remove(2)\nlist_example2\n\n[3, 2, 4, 4]\n\n\nFor removing multiple elements in a list, either pop or remove can be used in a for loop, or a for loop can be used with a condition. See the examples below.\nLet’s say we need to remove integers less than 100 from the following list.\n\nlist_example3 = list(range(95,106))\nlist_example3\n\n[95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105]\n\n\n\n#Method 1: For loop with remove\nlist_example3_filtered = list(list_example3) #\nfor element in list_example3:\n    if element&lt;100:\n        list_example3_filtered.remove(element)\nprint(list_example3_filtered)\n\n[100, 101, 102, 103, 104, 105]\n\n\n\\(\\color{red}{\\text{Q1}}\\): What’s the need to define a new variable list\\_example3\\_filtered in the above code?\n\\(\\color{blue}{\\text{A1}}\\): Replace list_example3_filtered with list_example3 and identify the issue.\n\n#Method 2: Check this method after reading Section 5.2.6 on slicing a list\nlist_example3 = list(range(95,106))\n\n#Slicing a list using ':' creates a copy of the list, and so \nfor element in list_example3[:]:\n    if element&lt;100:\n        list_example3.remove(element)\nprint(list_example3)\n\n[100, 101, 102, 103, 104, 105]\n\n\n\n#Method 3: For loop with condition\n[element for element in list_example3 if element&gt;100]\n\n[101, 102, 103, 104, 105]\n\n\n\n\n5.2.2 List comprehensions\nList comprehension is a compact way to create new lists based on elements of an existing list or other objects.\nExample: Create a list that has squares of natural numbers from 5 to 15.\n\nsqrt_natural_no_5_15 = [(x**2) for x in range(5,16)]\nprint(sqrt_natural_no_5_15)\n\n[25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225]\n\n\nExample: Create a list of tuples, where each tuple consists of a natural number and its square, for natural numbers ranging from 5 to 15.\n\nsqrt_natural_no_5_15 = [(x,x**2) for x in range(5,16)]\nprint(sqrt_natural_no_5_15)\n\n[(5, 25), (6, 36), (7, 49), (8, 64), (9, 81), (10, 100), (11, 121), (12, 144), (13, 169), (14, 196), (15, 225)]\n\n\n\n\n5.2.3 Practice exercise 3\nBelow is a list consisting of responses to the question: “At what age do you think you will marry?” from students of the STAT303-1 Fall 2022 class.\n\nexp_marriage_age=['24','30','28','29','30','27','26','28','30+','26','28','30','30','30','probably never','30','25','25','30','28','30+ ','30','25','28','28','25','25','27','28','30','30','35','26','28','27','27','30','25','30','26','32','27','26','27','26','28','37','28','28','28','35','28','27','28','26','28','26','30','27','30','28','25','26','28','35','29','27','27','30','24','25','29','27','33','30','30','25','26','30','32','26','30','30','I wont','25','27','27','25','27','27','32','26','25','never','28','33','28','35','25','30','29','30','31','28','28','30','40','30','28','30','27','by 30','28','27','28','30-35','35','30','30','never','30','35','28','31','30','27','33','32','27','27','26','N/A','25','26','29','28','34','26','24','28','30','120','25','33','27','28','32','30','26','30','30','28','27','27','27','27','27','27','28','30','30','30','28','30','28','30','30','28','28','30','27','30','28','25','never','69','28','28','33','30','28','28','26','30','26','27','30','25','Never','27','27','25']\n\nUse list comprehension to:\n\n5.2.3.1 \nRemove the elements that are not integers - such as ‘probably never’, ‘30+’, etc. What is the length of the new list?\nHint: The built-in python function of the str class - isdigit() may be useful to check if the string contains only digits.\n\nexp_marriage_age_num = [x for x in exp_marriage_age if x.isdigit()==True]\nprint(\"Length of the new list = \",len(exp_marriage_age_num))\n\nLength of the new list =  181\n\n\n\n\n5.2.3.2 \nCap the values greater than 80 to 80, in the clean list obtained in (1). What is the mean age when people expect to marry in the new list?\n\nexp_marriage_age_capped = [min(int(x),80) for x in exp_marriage_age_num]\nprint(\"Mean age when people expect to marry = \", sum(exp_marriage_age_capped)/len(exp_marriage_age_capped))\n\nMean age when people expect to marry =  28.955801104972377\n\n\n\n\n5.2.3.3 \nDetermine the percentage of people who expect to marry at an age of 30 or more.\n\nprint(\"Percentage of people who expect to marry at an age of 30 or more =\", str(100*sum([1 for x in exp_marriage_age_capped if x&gt;=30])/len(exp_marriage_age_capped)),\"%\")\n\nPercentage of people who expect to marry at an age of 30 or more = 37.01657458563536 %\n\n\n\n\n\n5.2.4 Concatenating lists\nAs in tuples, lists can be concatenated using the + operator:\n\nimport time as tm\n\n\nlist_example4 = [5,'hi',4] \nlist_example4 = list_example4 + [None,'7',9]\nlist_example4\n\n[5, 'hi', 4, None, '7', 9]\n\n\nFor adding elements to a list, the extend method is preferred over the + operator. This is because the + operator creates a new list, while the extend method adds elements to an existing list. Thus, the extend operator is more memory efficient.\n\nlist_example4 = [5,'hi',4]\nlist_example4.extend([None, '7', 9])\nlist_example4\n\n[5, 'hi', 4, None, '7', 9]\n\n\n\n\n5.2.5 Sorting a list\nA list can be sorted using the sort method:\n\nlist_example5 = [6,78,9]\nlist_example5.sort(reverse=True) #the reverse argument is used to specify if the sorting is in ascending or descending order\nlist_example5\n\n[78, 9, 6]\n\n\n\n\n5.2.6 Slicing a list\nWe may extract or update a section of the list by passing the starting index (say start) and the stopping index (say stop) as start:stop to the index operator []. This is called slicing a list. For example, see the following example.\n\nlist_example6 = [4,7,3,5,7,1,5,87,5]\n\nLet us extract a slice containing all the elements from the the 3rd position to the 7th position.\n\nlist_example6[2:7]\n\n[3, 5, 7, 1, 5]\n\n\nNote that while the element at the start index is included, the element with the stop index is excluded in the above slice.\nIf either the start or stop index is not mentioned, the slicing will be done from the beginning or until the end of the list, respectively.\n\nlist_example6[:7]\n\n[4, 7, 3, 5, 7, 1, 5]\n\n\n\nlist_example6[2:]\n\n[3, 5, 7, 1, 5, 87, 5]\n\n\nTo slice the list relative to the end, we can use negative indices:\n\nlist_example6[-4:]\n\n[1, 5, 87, 5]\n\n\n\nlist_example6[-4:-2:]\n\n[1, 5]\n\n\nAn extra colon (‘:’) can be used to slice every ith element of a list.\n\n#Selecting every 3rd element of a list\nlist_example6[::3]\n\n[4, 5, 5]\n\n\n\n#Selecting every 3rd element of a list from the end\nlist_example6[::-3]\n\n[5, 1, 3]\n\n\n\n#Selecting every element of a list from the end or reversing a list \nlist_example6[::-1]\n\n[5, 87, 5, 1, 7, 5, 3, 7, 4]\n\n\n\n\n5.2.7 Practice exercise 4\nStart with the list [8,9,10]. Do the following:\n\n5.2.7.1 \nSet the second entry (index 1) to 17\n\nL = [8,9,10]\nL[1]=17\n\n\n\n5.2.7.2 \nAdd 4, 5, and 6 to the end of the list\n\nL = L+[4,5,6]\n\n\n\n5.2.7.3 \nRemove the first entry from the list\n\nL.pop(0)\n\n8\n\n\n\n\n5.2.7.4 \nSort the list\n\nL.sort()\n\n\n\n5.2.7.5 \nDouble the list (concatenate the list to itself)\n\nL=L+L\n\n\n\n5.2.7.6 \nInsert 25 at index 3\nThe final list should equal [4,5,6,25,10,17,4,5,6,10,17]\n\nL.insert(3,25)\nL\n\n[4, 5, 6, 25, 10, 17, 4, 5, 6, 10, 17]\n\n\nNow that we have an idea about lists, let us try to think where it can be used.\n\n\n\n\n\n \n        \n\n\nNow that we have learned about lists and tuples, let us compare them.\n\\(\\color{red}{\\text{Q2}}\\): A list seems to be much more flexible than tuple, and can replace a tuple almost everywhere. Then why use tuple at all?\n\\(\\color{blue}{\\text{A2}}\\): The additional flexibility of a list comes at the cost of efficiency. Some of the advatages of a tuple over a list are as follows:\n\nSince a list can be extended, space is over-allocated when creating a list. A tuple takes less storage space as compared to a list of the same length.\nTuples are not copied. If a tuple is assigned to another tuple, both tuples point to the same memory location. However, if a list is assigned to another list, a new list is created consuming the same memory space as the orignial list.\nTuples refer to their element directly, while in a list, there is an extra layer of pointers that refers to their elements. Thus it is faster to retrieve elements from a tuple.\n\nThe examples below illustrate the above advantages of a tuple.\n\n#Example showing tuples take less storage space than lists for the same elements\ntuple_ex = (1, 2, 'Obama')\nlist_ex = [1, 2, 'Obama']\nprint(\"Space taken by tuple =\",tuple_ex.__sizeof__(),\" bytes\")\nprint(\"Space taken by list =\",list_ex.__sizeof__(),\" bytes\")\n\nSpace taken by tuple = 48  bytes\nSpace taken by list = 64  bytes\n\n\n\n#Examples showing that a tuples are not copied, while lists can be copied\ntuple_copy = tuple(tuple_ex)\nprint(\"Is tuple_copy same as tuple_ex?\", tuple_ex is tuple_copy)\nlist_copy = list(list_ex)\nprint(\"Is list_copy same as list_ex?\",list_ex is list_copy)\n\nIs tuple_copy same as tuple_ex? True\nIs list_copy same as list_ex? False\n\n\n\n#Examples showing tuples takes lesser time to retrieve elements\nimport time as tm\ntt = tm.time()\nlist_ex = list(range(1000000)) #List containinig whole numbers upto 1 million\na=(list_ex[::-2])\nprint(\"Time take to retrieve every 2nd element from a list = \", tm.time()-tt)\n\ntt = tm.time()\ntuple_ex = tuple(range(1000000)) #tuple containinig whole numbers upto 1 million\na=(tuple_ex[::-2])\nprint(\"Time take to retrieve every 2nd element from a tuple = \", tm.time()-tt)\n\nTime take to retrieve every 2nd element from a list =  0.03579902648925781\nTime take to retrieve every 2nd element from a tuple =  0.02684164047241211",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Data structures</span>"
    ]
  },
  {
    "objectID": "data_structures-complete.html#dictionary",
    "href": "data_structures-complete.html#dictionary",
    "title": "5  Data structures",
    "section": "5.3 Dictionary",
    "text": "5.3 Dictionary\nA dictionary consists of key-value pairs, where the keys and values are python objects. While values can be any python object, keys need to be immutable python objects, like strings, integers, tuples, etc. Thus, a list can be a value, but not a key, as elements of list can be changed. A dictionary is defined using the keyword dict along with curly braces, colons to separate keys and values, and commas to separate elements of a dictionary:\n\ndict_example = {'USA':'Joe Biden', 'India':'Narendra Modi', 'China':'Xi Jinping'}\n\nElements of a dictionary can be retrieved by using the corresponding key.\n\ndict_example['India']\n\n'Narendra Modi'\n\n\n\n5.3.1 Adding and removing elements in a dictionary\nNew elements can be added to a dictionary by defining a key in square brackets and assiging it to a value:\n\ndict_example['Japan'] = 'Fumio Kishida'\ndict_example['Countries'] = 4\ndict_example\n\n{'USA': 'Joe Biden',\n 'India': 'Narendra Modi',\n 'China': 'Xi Jinping',\n 'Japan': 'Fumio Kishida',\n 'Countries': 4}\n\n\nElements can be removed from the dictionary using the del method or the pop method:\n\n#Removing the element having key as 'Countries'\ndel dict_example['Countries']\n\n\ndict_example\n\n{'USA': 'Joe Biden',\n 'India': 'Narendra Modi',\n 'China': 'Xi Jinping',\n 'Japan': 'Fumio Kishida'}\n\n\n\n#Removing the element having key as 'USA'\ndict_example.pop('USA')\n\n'Joe Biden'\n\n\n\ndict_example\n\n{'India': 'Narendra Modi', 'China': 'Xi Jinping', 'Japan': 'Fumio Kishida'}\n\n\nNew elements can be added, and values of exisiting keys can be changed using the update method:\n\ndict_example = {'USA':'Joe Biden', 'India':'Narendra Modi', 'China':'Xi Jinping','Countries':3}\ndict_example\n\n{'USA': 'Joe Biden',\n 'India': 'Narendra Modi',\n 'China': 'Xi Jinping',\n 'Countries': 3}\n\n\n\ndict_example.update({'Countries':4, 'Japan':'Fumio Kishida'})\n\n\ndict_example\n\n{'USA': 'Joe Biden',\n 'India': 'Narendra Modi',\n 'China': 'Xi Jinping',\n 'Countries': 4,\n 'Japan': 'Fumio Kishida'}\n\n\n\n\n5.3.2 Iterating over elements of a dictionary\nThe items() attribute of a dictionary can be used to iterate over elements of a dictionary.\n\nfor key,value in dict_example.items():\n    print(\"The Head of State of\",key,\"is\",value)\n\nThe Head of State of USA is Joe Biden\nThe Head of State of India is Narendra Modi\nThe Head of State of China is Xi Jinping\nThe Head of State of Countries is 4\nThe Head of State of Japan is Fumio Kishida\n\n\n\n\n5.3.3 Practice exercise 5\nThe GDP per capita of USA for most years from 1960 to 2021 is given by the dictionary D given in the code cell below.\nFind:\n\nThe GDP per capita in 2015\nThe GDP per capita of 2014 is missing. Update the dictionary to include the GDP per capita of 2014 as the average of the GDP per capita of 2013 and 2015.\nImpute the GDP per capita of other missing years in the same manner as in (2), i.e., as the average GDP per capita of the previous year and the next year. Note that the GDP per capita is not missing for any two consecutive years.\nPrint the years and the imputed GDP per capita for the years having a missing value of GDP per capita in (3).\n\n\nD = {'1960':3007,'1961':3067,'1962':3244,'1963':3375,'1964':3574,'1965':3828,'1966':4146,'1967':4336,'1968':4696,'1970':5234,'1971':5609,'1972':6094,'1973':6726,'1974':7226,'1975':7801,'1976':8592,'1978':10565,'1979':11674, '1980':12575,'1981':13976,'1982':14434,'1983':15544,'1984':17121,'1985':18237,  '1986':19071,'1987':20039,'1988':21417,'1989':22857,'1990':23889,'1991':24342,  '1992':25419,'1993':26387,'1994':27695,'1995':28691,'1996':29968,'1997':31459,  '1998':32854,'2000':36330,'2001':37134,'2002':37998,'2003':39490,'2004':41725,  '2005':44123,'2006':46302,'2007':48050,'2008':48570,'2009':47195,'2010':48651,  '2011':50066,'2012':51784,'2013':53291,'2015':56763,'2016':57867,'2017':59915,'2018':62805, '2019':65095,'2020':63028,'2021':69288}\n\nSolution:\n\nprint(\"GDP per capita in 2015 =\", D['2015'])\nD['2014'] = (D['2013']+D['2015'])/2\n\n#Iterating over all years from 1960 to 2021\nfor i in range(1960,2021):\n    \n    #Imputing the GDP of the year if it is missing\n    if str(i) not in D.keys():    \n        D[str(i)] = (D[str(i-1)]+D[str(i+1)])/2\n        print(\"Imputed GDP per capita for the year\",i,\"is $\",D[str(i)])\n\nGDP per capita in 2015 = 56763\nImputed GDP per capita for the year 1969 is $ 4965.0\nImputed GDP per capita for the year 1977 is $ 9578.5\nImputed GDP per capita for the year 1999 is $ 34592.0\n\n\n\n\n5.3.4 Practice exercise 6\nThe object deck defined below corresponds to a deck of cards. Estimate the probablity that a five card hand will be a flush, as follows:\n\nWrite a function that accepts a hand of 5 cards as argument, and returns whether the hand is a flush or not.\nRandomly pull a hand of 5 cards from the deck. Call the function developed in (1) to determine if the hand is a flush.\nRepeat (2) 10,000 times.\nEstimate the probability of the hand being a flush from the results of the 10,000 simulations.\n\nYou may use the function shuffle() from the random library to shuffle the deck everytime before pulling a hand of 5 cards.\n\ndeck = [{'value':i, 'suit':c}\nfor c in ['spades', 'clubs', 'hearts', 'diamonds']\nfor i in range(2,15)]\n\nSolution:\n\nimport random as rm\n\n#Function to check if a 5-card hand is a flush\ndef chck_flush(hands):  \n    \n    #Assuming that the hand is a flush, before checking the cards\n    yes_flush =1\n    \n    #Storing the suit of the first card in 'first_suit'\n    first_suit = hands[0]['suit']\n    \n    #Iterating over the remaining 4 cards of the hand\n    for j in range(1,len(hands)):\n        \n        #If the suit of any of the cards does not match the suit of the first card, the hand is not a flush\n        if first_suit!=hands[j]['suit']:\n            yes_flush = 0; \n            \n            #As soon as a card with a different suit is found, the hand is not a flush and there is no need to check other cards. So, we 'break' out of the loop\n            break;\n    return yes_flush\n\nflush=0\nfor i in range(10000):\n    \n    #Shuffling the deck\n    rm.shuffle(deck)\n    \n    #Picking out the first 5 cards of the deck as a hand and checking if they are a flush\n    #If the hand is a flush it is counted\n    flush=flush+chck_flush(deck[0:5])\n    \nprint(\"Probability of obtaining a flush=\", 100*(flush/10000),\"%\")\n\nProbability of obtaining a flush= 0.2 %",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Data structures</span>"
    ]
  },
  {
    "objectID": "data_structures-complete.html#practice-exercise-7",
    "href": "data_structures-complete.html#practice-exercise-7",
    "title": "5  Data structures",
    "section": "5.4 Practice exercise 7",
    "text": "5.4 Practice exercise 7\nThe code cell below defines an object having the nutrition information of drinks in starbucks. Assume that the manner in which the information is structured is consistent throughout the object.\n\nstarbucks_drinks_nutrition={'Cool Lime Starbucks Refreshers™ Beverage': [{'Nutrition_type': 'Calories', 'value': 45}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 11}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 10}], 'Strawberry Acai Starbucks Refreshers™ Beverage': [{'Nutrition_type': 'Calories', 'value': 80}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 18}, {'Nutrition_type': 'Fiber', 'value': 1}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 10}], 'Very Berry Hibiscus Starbucks Refreshers™ Beverage': [{'Nutrition_type': 'Calories', 'value': 60}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 14}, {'Nutrition_type': 'Fiber', 'value': 1}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 10}], 'Evolution Fresh™ Organic Ginger Limeade': [{'Nutrition_type': 'Calories', 'value': 110}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 28}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 5}], 'Iced Coffee': [{'Nutrition_type': 'Calories', 'value': 5}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 0}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 5}], 'Iced Espresso Classics - Vanilla Latte': [{'Nutrition_type': 'Calories', 'value': 130}, {'Nutrition_type': 'Fat', 'value': 2.5}, {'Nutrition_type': 'Carb', 'value': 21}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 5}, {'Nutrition_type': 'Sodium', 'value': 65}], 'Iced Espresso Classics - Caffe Mocha': [{'Nutrition_type': 'Calories', 'value': 140}, {'Nutrition_type': 'Fat', 'value': 2.5}, {'Nutrition_type': 'Carb', 'value': 23}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 5}, {'Nutrition_type': 'Sodium', 'value': 90}], 'Iced Espresso Classics - Caramel Macchiato': [{'Nutrition_type': 'Calories', 'value': 130}, {'Nutrition_type': 'Fat', 'value': 2.5}, {'Nutrition_type': 'Carb', 'value': 21}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 5}, {'Nutrition_type': 'Sodium', 'value': 65}], 'Shaken Sweet Tea': [{'Nutrition_type': 'Calories', 'value': 80}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 19}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 10}], 'Tazo® Bottled Berry Blossom White': [{'Nutrition_type': 'Calories', 'value': 60}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 15}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 10}], 'Tazo® Bottled Black Mango': [{'Nutrition_type': 'Calories', 'value': 150}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 38}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 15}], 'Tazo® Bottled Black with Lemon': [{'Nutrition_type': 'Calories', 'value': 140}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 35}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 10}], 'Tazo® Bottled Brambleberry': [{'Nutrition_type': 'Calories', 'value': 140}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 35}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 15}], 'Tazo® Bottled Giant Peach': [{'Nutrition_type': 'Calories', 'value': 150}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 37}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 15}], 'Tazo® Bottled Iced Passion': [{'Nutrition_type': 'Calories', 'value': 70}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 17}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 10}], 'Tazo® Bottled Lemon Ginger': [{'Nutrition_type': 'Calories', 'value': 120}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 31}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 10}], 'Tazo® Bottled Organic Black Lemonade': [{'Nutrition_type': 'Calories', 'value': 140}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 35}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 10}], 'Tazo® Bottled Organic Iced Black Tea': [{'Nutrition_type': 'Calories', 'value': 60}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 15}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 10}], 'Tazo® Bottled Organic Iced Green Tea': [{'Nutrition_type': 'Calories', 'value': 120}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 31}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 10}], 'Tazo® Bottled Plum Pomegranate': [{'Nutrition_type': 'Calories', 'value': 140}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 35}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 10}], 'Tazo® Bottled Tazoberry': [{'Nutrition_type': 'Calories', 'value': 150}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 38}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 15}], 'Tazo® Bottled White Cranberry': [{'Nutrition_type': 'Calories', 'value': 140}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 35}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 10}], 'Teavana® Shaken Iced Black Tea': [{'Nutrition_type': 'Calories', 'value': 30}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 8}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 5}], 'Teavana® Shaken Iced Black Tea Lemonade': [{'Nutrition_type': 'Calories', 'value': 70}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 17}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 0}], 'Teavana® Shaken Iced Green Tea': [{'Nutrition_type': 'Calories', 'value': 30}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 8}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 5}], 'Teavana® Shaken Iced Green Tea Lemonade': [{'Nutrition_type': 'Calories', 'value': 70}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 17}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 5}], 'Teavana® Shaken Iced Passion Tango™ Tea': [{'Nutrition_type': 'Calories', 'value': 30}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 8}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 5}], 'Teavana® Shaken Iced Passion Tango™ Tea Lemonade': [{'Nutrition_type': 'Calories', 'value': 90}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 24}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 0}], 'Teavana® Shaken Iced Peach Green Tea': [{'Nutrition_type': 'Calories', 'value': 60}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 15}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 0}], 'Starbucks Refreshers™ Raspberry Pomegranate': [{'Nutrition_type': 'Calories', 'value': 90}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 27}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 0}], 'Starbucks Refreshers™ Strawberry Lemonade': [{'Nutrition_type': 'Calories', 'value': 90}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 27}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 0}], 'Starbucks® Doubleshot Protein Dark Chocolate': [{'Nutrition_type': 'Calories', 'value': 210}, {'Nutrition_type': 'Fat', 'value': 2.5}, {'Nutrition_type': 'Carb', 'value': 33}, {'Nutrition_type': 'Fiber', 'value': 2}, {'Nutrition_type': 'Protein', 'value': 20}, {'Nutrition_type': 'Sodium', 'value': 115}], 'Starbucks® Doubleshot Protein Vanilla': [{'Nutrition_type': 'Calories', 'value': 200}, {'Nutrition_type': 'Fat', 'value': 2.5}, {'Nutrition_type': 'Carb', 'value': 34}, {'Nutrition_type': 'Fiber', 'value': 2}, {'Nutrition_type': 'Protein', 'value': 20}, {'Nutrition_type': 'Sodium', 'value': 120}], 'Starbucks® Iced Coffee Caramel': [{'Nutrition_type': 'Calories', 'value': 60}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 13}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 1}, {'Nutrition_type': 'Sodium', 'value': 0}], 'Starbucks® Iced Coffee Light Sweetened': [{'Nutrition_type': 'Calories', 'value': 50}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 11}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 1}, {'Nutrition_type': 'Sodium', 'value': 0}], 'Starbucks® Iced Coffee Unsweetened': [{'Nutrition_type': 'Calories', 'value': 10}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 2}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 1}, {'Nutrition_type': 'Sodium', 'value': 0}], 'Blonde Roast': [{'Nutrition_type': 'Calories', 'value': 5}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 0}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 1}, {'Nutrition_type': 'Sodium', 'value': 10}], 'Clover® Brewed Coffee': [{'Nutrition_type': 'Calories', 'value': 10}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 0}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 1}, {'Nutrition_type': 'Sodium', 'value': 10}], 'Decaf Pike Place® Roast': [{'Nutrition_type': 'Calories', 'value': 5}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 0}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 1}, {'Nutrition_type': 'Sodium', 'value': 10}], 'Featured Dark Roast': [{'Nutrition_type': 'Calories', 'value': 5}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 0}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 1}, {'Nutrition_type': 'Sodium', 'value': 10}], 'Nariño 70 Cold Brew': [{'Nutrition_type': 'Calories', 'value': 5}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 0}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 15}], 'Nariño 70 Cold Brew with Milk': [{'Nutrition_type': 'Calories', 'value': 0}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 0}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 0}], 'Nitro Cold Brew': [{'Nutrition_type': 'Calories', 'value': 5}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 0}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 0}, {'Nutrition_type': 'Sodium', 'value': 10}], 'Nitro Cold Brew with Sweet Cream': [{'Nutrition_type': 'Calories', 'value': 70}, {'Nutrition_type': 'Fat', 'value': 5.0}, {'Nutrition_type': 'Carb', 'value': 5}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 1}, {'Nutrition_type': 'Sodium', 'value': 20}], 'Pike Place® Roast': [{'Nutrition_type': 'Calories', 'value': 5}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 0}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 1}, {'Nutrition_type': 'Sodium', 'value': 10}], 'Vanilla Sweet Cream Cold Brew': [{'Nutrition_type': 'Calories', 'value': 110}, {'Nutrition_type': 'Fat', 'value': 6.0}, {'Nutrition_type': 'Carb', 'value': 14}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 1}, {'Nutrition_type': 'Sodium', 'value': 25}], 'Hot Chocolate': [{'Nutrition_type': 'Calories', 'value': 320}, {'Nutrition_type': 'Fat', 'value': 9.0}, {'Nutrition_type': 'Carb', 'value': 47}, {'Nutrition_type': 'Fiber', 'value': 4}, {'Nutrition_type': 'Protein', 'value': 14}, {'Nutrition_type': 'Sodium', 'value': 160}], 'Starbucks® Signature Hot Chocolate': [{'Nutrition_type': 'Calories', 'value': 430}, {'Nutrition_type': 'Fat', 'value': 26.0}, {'Nutrition_type': 'Carb', 'value': 45}, {'Nutrition_type': 'Fiber', 'value': 5}, {'Nutrition_type': 'Protein', 'value': 12}, {'Nutrition_type': 'Sodium', 'value': 115}], 'Caffè Latte': [{'Nutrition_type': 'Calories', 'value': 190}, {'Nutrition_type': 'Fat', 'value': 7.0}, {'Nutrition_type': 'Carb', 'value': 19}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 13}, {'Nutrition_type': 'Sodium', 'value': 170}], 'Caffè Mocha': [{'Nutrition_type': 'Calories', 'value': 290}, {'Nutrition_type': 'Fat', 'value': 8.0}, {'Nutrition_type': 'Carb', 'value': 42}, {'Nutrition_type': 'Fiber', 'value': 4}, {'Nutrition_type': 'Protein', 'value': 13}, {'Nutrition_type': 'Sodium', 'value': 140}], 'Cappuccino': [{'Nutrition_type': 'Calories', 'value': 120}, {'Nutrition_type': 'Fat', 'value': 4.0}, {'Nutrition_type': 'Carb', 'value': 12}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 8}, {'Nutrition_type': 'Sodium', 'value': 100}], 'Caramel Macchiato': [{'Nutrition_type': 'Calories', 'value': 250}, {'Nutrition_type': 'Fat', 'value': 7.0}, {'Nutrition_type': 'Carb', 'value': 35}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 10}, {'Nutrition_type': 'Sodium', 'value': 150}], 'Cinnamon Dolce Latte': [{'Nutrition_type': 'Calories', 'value': 260}, {'Nutrition_type': 'Fat', 'value': 6.0}, {'Nutrition_type': 'Carb', 'value': 40}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 11}, {'Nutrition_type': 'Sodium', 'value': 150}], 'Coconutmilk Mocha Macchiato': [{'Nutrition_type': 'Calories', 'value': 250}, {'Nutrition_type': 'Fat', 'value': 9.0}, {'Nutrition_type': 'Carb', 'value': 32}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 12}, {'Nutrition_type': 'Sodium', 'value': 180}], 'Flat White': [{'Nutrition_type': 'Calories', 'value': 180}, {'Nutrition_type': 'Fat', 'value': 7.0}, {'Nutrition_type': 'Carb', 'value': 18}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 12}, {'Nutrition_type': 'Sodium', 'value': 160}], 'Iced Caffè Latte': [{'Nutrition_type': 'Calories', 'value': 130}, {'Nutrition_type': 'Fat', 'value': 4.5}, {'Nutrition_type': 'Carb', 'value': 13}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 8}, {'Nutrition_type': 'Sodium', 'value': 115}], 'Iced Caffè Mocha': [{'Nutrition_type': 'Calories', 'value': 230}, {'Nutrition_type': 'Fat', 'value': 6.0}, {'Nutrition_type': 'Carb', 'value': 36}, {'Nutrition_type': 'Fiber', 'value': 4}, {'Nutrition_type': 'Protein', 'value': 9}, {'Nutrition_type': 'Sodium', 'value': 90}], 'Iced Caramel Macchiato': [{'Nutrition_type': 'Calories', 'value': 250}, {'Nutrition_type': 'Fat', 'value': 7.0}, {'Nutrition_type': 'Carb', 'value': 37}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 10}, {'Nutrition_type': 'Sodium', 'value': 150}], 'Iced Cinnamon Dolce Latte': [{'Nutrition_type': 'Calories', 'value': 200}, {'Nutrition_type': 'Fat', 'value': 4.0}, {'Nutrition_type': 'Carb', 'value': 34}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 7}, {'Nutrition_type': 'Sodium', 'value': 95}], 'Iced Coconutmilk Mocha Macchiato': [{'Nutrition_type': 'Calories', 'value': 260}, {'Nutrition_type': 'Fat', 'value': 9.0}, {'Nutrition_type': 'Carb', 'value': 34}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 11}, {'Nutrition_type': 'Sodium', 'value': 180}], 'Iced Vanilla Latte': [{'Nutrition_type': 'Calories', 'value': 190}, {'Nutrition_type': 'Fat', 'value': 4.0}, {'Nutrition_type': 'Carb', 'value': 30}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 7}, {'Nutrition_type': 'Sodium', 'value': 100}], 'Iced White Chocolate Mocha': [{'Nutrition_type': 'Calories', 'value': 300}, {'Nutrition_type': 'Fat', 'value': 8.0}, {'Nutrition_type': 'Carb', 'value': 47}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 10}, {'Nutrition_type': 'Sodium', 'value': 190}], 'Latte Macchiato': [{'Nutrition_type': 'Calories', 'value': 190}, {'Nutrition_type': 'Fat', 'value': 7.0}, {'Nutrition_type': 'Carb', 'value': 19}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 12}, {'Nutrition_type': 'Sodium', 'value': 160}], 'Starbucks Doubleshot® on Ice Beverage': [{'Nutrition_type': 'Calories', 'value': 45}, {'Nutrition_type': 'Fat', 'value': 1.0}, {'Nutrition_type': 'Carb', 'value': 5}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 3}, {'Nutrition_type': 'Sodium', 'value': 40}], 'Vanilla Latte': [{'Nutrition_type': 'Calories', 'value': 250}, {'Nutrition_type': 'Fat', 'value': 6.0}, {'Nutrition_type': 'Carb', 'value': 37}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 12}, {'Nutrition_type': 'Sodium', 'value': 150}], 'White Chocolate Mocha': [{'Nutrition_type': 'Calories', 'value': 360}, {'Nutrition_type': 'Fat', 'value': 11.0}, {'Nutrition_type': 'Carb', 'value': 53}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 14}, {'Nutrition_type': 'Sodium', 'value': 240}], 'Cinnamon Dolce Frappuccino® Blended Coffee': [{'Nutrition_type': 'Calories', 'value': 350}, {'Nutrition_type': 'Fat', 'value': 4.5}, {'Nutrition_type': 'Carb', 'value': 64}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 15}, {'Nutrition_type': 'Sodium', 'value': 0}], 'Coffee Light Frappuccino® Blended Coffee': [{'Nutrition_type': 'Calories', 'value': 110}, {'Nutrition_type': 'Fat', 'value': 0.0}, {'Nutrition_type': 'Carb', 'value': 24}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 3}, {'Nutrition_type': 'Sodium', 'value': 200}], 'Mocha Frappuccino® Blended Coffee': [{'Nutrition_type': 'Calories', 'value': 280}, {'Nutrition_type': 'Fat', 'value': 2.5}, {'Nutrition_type': 'Carb', 'value': 60}, {'Nutrition_type': 'Fiber', 'value': 2}, {'Nutrition_type': 'Protein', 'value': 4}, {'Nutrition_type': 'Sodium', 'value': 220}], 'Mocha Light Frappuccino® Blended Coffee': [{'Nutrition_type': 'Calories', 'value': 140}, {'Nutrition_type': 'Fat', 'value': 0.5}, {'Nutrition_type': 'Carb', 'value': 28}, {'Nutrition_type': 'Fiber', 'value': 1}, {'Nutrition_type': 'Protein', 'value': 4}, {'Nutrition_type': 'Sodium', 'value': 180}], 'Cinnamon Dolce Crème': [{'Nutrition_type': 'Calories', 'value': 200}, {'Nutrition_type': 'Fat', 'value': 6.0}, {'Nutrition_type': 'Carb', 'value': 28}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 10}, {'Nutrition_type': 'Sodium', 'value': 135}], 'Vanilla Crème': [{'Nutrition_type': 'Calories', 'value': 200}, {'Nutrition_type': 'Fat', 'value': 6.0}, {'Nutrition_type': 'Carb', 'value': 28}, {'Nutrition_type': 'Fiber', 'value': 0}, {'Nutrition_type': 'Protein', 'value': 10}, {'Nutrition_type': 'Sodium', 'value': 135}], 'Chocolate Smoothie': [{'Nutrition_type': 'Calories', 'value': 320}, {'Nutrition_type': 'Fat', 'value': 5.0}, {'Nutrition_type': 'Carb', 'value': 53}, {'Nutrition_type': 'Fiber', 'value': 8}, {'Nutrition_type': 'Protein', 'value': 20}, {'Nutrition_type': 'Sodium', 'value': 170}], 'Strawberry Smoothie': [{'Nutrition_type': 'Calories', 'value': 300}, {'Nutrition_type': 'Fat', 'value': 2.0}, {'Nutrition_type': 'Carb', 'value': 60}, {'Nutrition_type': 'Fiber', 'value': 7}, {'Nutrition_type': 'Protein', 'value': 16}, {'Nutrition_type': 'Sodium', 'value': 130}]}\n\nUse the object above to answer the following questions:\n\n5.4.1 \nWhat is the datatype of the object?\n\nprint(\"Datatype=\",type(starbucks_drinks_nutrition)) \n\nDatatype= &lt;class 'dict'&gt;\n\n\n\n5.4.1.1 \nIf the object in (1) is a dictionary, what is the datatype of the values of the dictionary?\n\nprint(\"Datatype=\",type(starbucks_drinks_nutrition[list(starbucks_drinks_nutrition.keys())[0]]))\n\nDatatype= &lt;class 'list'&gt;\n\n\n\n\n5.4.1.2 \nIf the object in (1) is a dictionary, what is the datatype of the elements within the values of the dictionary?\n\nprint(\"Datatype=\",type(starbucks_drinks_nutrition[list(starbucks_drinks_nutrition.keys())[0]][0]))\n\nDatatype= &lt;class 'dict'&gt;\n\n\n\n\n5.4.1.3 \nHow many calories are there in Iced Coffee?\n\nprint(\"Calories = \",starbucks_drinks_nutrition['Iced Coffee'][0]['value'])\n\nCalories =  5\n\n\n\n\n5.4.1.4 \nWhich drink(s) have the highest amount of protein in them, and what is that protein amount?\n\n#Defining an empty dictionary that will be used to store the protein of each drink\nprotein={}\n\nfor key,value in starbucks_drinks_nutrition.items():\n    for nutrition in value:        \n        if nutrition['Nutrition_type']=='Protein':\n            protein[key]=(nutrition['value'])\n\n#Using dictionary comprehension to find the key-value pair having the maximum value in the dictionary\n{key:value for key, value in protein.items() if value == max(protein.values())}\n\n{'Starbucks® Doubleshot Protein Dark Chocolate': 20,\n 'Starbucks® Doubleshot Protein Vanilla': 20,\n 'Chocolate Smoothie': 20}\n\n\n\n\n5.4.1.5 \nWhich drink(s) have a fat content of more than 10g, and what is their fat content?\n\n#Defining an empty dictionary that will be used to store the fat of each drink\nfat={}\nfor key,value in starbucks_drinks_nutrition.items():\n    for nutrition in value:        \n        if nutrition['Nutrition_type']=='Fat':\n            fat[key]=(nutrition['value'])\n            \n#Using dictionary comprehension to find the key-value pair having the value more than 10\n{key:value for key, value in fat.items() if value&gt;=10}\n\n{'Starbucks® Signature Hot Chocolate': 26.0, 'White Chocolate Mocha': 11.0}",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Data structures</span>"
    ]
  },
  {
    "objectID": "classes.html",
    "href": "classes.html",
    "title": "6  Object-Oriented Programming",
    "section": "",
    "text": "6.1 Object\nIn Python, everything is an object, which makes it an object-oriented programming language.\nObject-oriented programming is the one in which a program is based on objects. An object is an independent entity within the program and can cooperatively work with other objects. A program can be made up of one or more objects, which can leverage the functionality and information contained in other objects.\nAn object consists of two items:\nWe have already seen several in-built python objects such as string objects, integer objects, float objects, list objects, tuple objects and dictionary objects, in previous chapters. Each of these objects have attributes and methods associated with them.\nFor example, consider a integer object named as integer_example.\ninteger_example = 5\nThe attributes and methods of this integer object can be seen by putting a . next to its name, and pressing the tab key. A dropdown menu consisting of the attributes and methods will appear as shown below.\nA list of all attributes and methods associated with an object can be obtained with the dir() function. Ignore the ones with underscores - these are used by Python itself. The rest of them can be used to perform operations.\n#This code is not executed to avoid printing a long list\ndir(integer_example)\nFor example, an attribute of integer_example is real, which contains the real part of the number:\ninteger_example.real\n\n5\nA example of a method of integer_example is as_integer_ratio(), which returns a tuple containing the numerator and denominator of the integer when it is expressed as a fraction.\ninteger_example.as_integer_ratio()\n\n(5, 1)\nNote that attributes do not have any parenthesis after them as they are just data, and cannot accept arguments. On the other hand methods have parenthesis after them as they are functions that may or may not have arguments.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Object-Oriented Programming</span>"
    ]
  },
  {
    "objectID": "classes.html#object",
    "href": "classes.html#object",
    "title": "6  Object-Oriented Programming",
    "section": "",
    "text": "Attributes - Attributes are the data stored within the object.\nMethods - Methods are the functions defined within the object. Methods can use the object attributes (or data stored within the object) as well as accept additional data as arguments.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Object-Oriented Programming</span>"
    ]
  },
  {
    "objectID": "classes.html#class",
    "href": "classes.html#class",
    "title": "6  Object-Oriented Programming",
    "section": "6.2 Class",
    "text": "6.2 Class\nA class is a template for objects. It contains the attributes and methods associated with the object of the class. As an analaogy, the class Cat will consist of characterisitcs (or attributes) shared by all cats such as breed, fur color, etc., as well as capability to perform functions (or methods) such as run, meow, etc.\nPlease see the python documentation for class.\nInstance: An instance is a specific realization of the object of a particular class. Continuing with the Cat analaogy of a class, a particular cat is an instance of the class Cat. Similarly, in the example above, the object integer_example is an instance of the class integer. The words object and instance are often used interchangeably.\nCreating an instance of a class is called Instantiation.\n\n6.2.1 Creating your own class\nUntil now we saw examples of in-built Python classes, such as integer, List, etc. Now, we’ll learn to create our own class that serves our purpose.\nBelow is a toy example of a class.\n\nclass ToyClass:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    \n    def add(self):\n        return self.x + self.y\n    \n    def multiply(self):\n        return self.x*self.y\n\nWe’ll use the example above to explain the following terms:\n\nThe class statement: We use the class statement to create a class. The Python style guide recommends to use CamelCase for class names.\nThe constructor (or the __init__() method): A class typically has a method called __init__. This method is called a constructor and is automatically called when an object or instance of the class is created. The constructor initializes the attributes of the class. In the above example, the constructor accepts two values as arguments, and initializes its attributes x and y with those values.\nThe self argument: This is the first argument to every method in the class. Whenever the class refers to one of its attributes or methods, it must precede them by self. The purpose of self is to distinguish the class’s attributes and methods from other variables and functions in the program.\n\nThe class ToyClass consists of two attributes x and y, a constructor __init__(), and two methods add() and multiply().\nTo create an object or instance of the class ToyClass, we’ll use the class name with the values to be passed as argument to the constructor for initializing the object / instance.\n\ntoy_instance = ToyClass(6,12)\n\nThe x attribute of the class ToyClass can be called using the . operator with the object name:\n\ntoy_instance.x\n\n6\n\n\nTo use the multiply() method of the class ToyClass, we’ll use the . operator with the object name:\n\ntoy_instance.multiply()\n\n72\n\n\n\n\n6.2.2 Example: A class that analyzes a string\nLet us create a class that analyzes a string.\n\nclass AnalyzeString:\n    \n    #Constructor\n    def __init__(self, s):\n        s = s.lower()\n        self.words = s.split()\n    \n    #This method counts the numebr of words\n    def number_of_words(self):\n        return (len(self.words))\n    \n    #This method counts the number of words starting with the string s\n    def starts_with(self,s):\n        return len([x for x in self.words if x[:len(s)]==s])\n    \n    #This method counts the number of words of length n\n    def words_with_length(self,n):\n        return len([x for x in self.words if len(x)==n])\n    \n    #This method returns the frequency of the word w\n    def word_frequency(self,w):\n        return self.words.count(w)\n\nLet us create an instance of the class AnalyzeString() to analyze a sentence.\n\n#Defining a string\nsentence = 'This sentence in an example of a string that we will analyse using a class we have defined'\n\n\n#Creating an instance of class AnalyzeString()\nsentence_analysis = AnalyzeString(sentence)\n\n\n#The attribute 'word' contains the list of words in the sentence\nsentence_analysis.words\n\n['this',\n 'sentence',\n 'in',\n 'an',\n 'example',\n 'of',\n 'a',\n 'string',\n 'that',\n 'we',\n 'will',\n 'analyse',\n 'using',\n 'a',\n 'class',\n 'we',\n 'have',\n 'defined']\n\n\n\n#The method 'word_frequncy()' provides the frequency of a word in the sentence\nsentnce_analysis.word_frequency('we')\n\n2\n\n\n\n#The method 'starts_with()' provides the frequency of number of words starting with a particular string\nsentnce_analysis.starts_with('th')\n\n2\n\n\n\n\n6.2.3 Practice exercise 1\nWrite a class called PasswordManager. The class should have a list called old_passwords that holds all of the user’s past passwords. The last item of the list is the user’s current password. There should be a method called get_password that returns the current password and a method called set_password that sets the user’s password. The set_password method should only change the password if the attempted password is different from all the user’s past passwords. It should either print ‘Password changed successfully!’, or ‘Old password cannot be reused, try again.’ Finally, create a method called is_correct that receives a string and returns a boolean True or False depending on whether the string is equal to the current password or not.\nTo initialize the object of the class, use the list below.\nAfter defining the class:\n\nCheck the attribute old_passwords\nCheck the method get_password()\nTry re-setting the password to ‘ibiza1972’, and then check the current password.\nTry re-setting the password to ‘oktoberfest2022’, and then check the current password.\nCheck the is_correct() method\n\n\npast_passwords = ['titanic1911','ibiza1972','montecarlo799']\n\n\nclass PasswordManager:\n    def __init__(self,past_passwords):\n        self.old_passwords = past_passwords\n        \n    def get_password(self):\n        return self.old_passwords[len(self.old_passwords)-1]\n    \n    def set_password(self,new_password):\n        if new_password not in self.old_passwords:\n            self.old_passwords.append(new_password)\n            print(\"Password changed!\")\n        else:\n            print(\"Old password cannot be reused, try again.\")\n            \n    def is_correct(self,password):\n        if password == self.old_passwords[len(self.old_passwords)-1]:\n            return True\n        return False\n\npasswd = PasswordManager(past_passwords)",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Object-Oriented Programming</span>"
    ]
  },
  {
    "objectID": "classes.html#inheritance",
    "href": "classes.html#inheritance",
    "title": "6  Object-Oriented Programming",
    "section": "6.3 Inheritance",
    "text": "6.3 Inheritance\nIn object-oriented programming there is a concept called inheritance where we can create a new class that builds off of another class. The new class gets all of the variables and methods of the class it is inheriting from (called the base class). It can then define additional variables and methods that are not present in the base class, and it can also override some of the methods of the base class. That is, it can rewrite them to suit its own purposes. Here is a simple example:\n\nclass Parent:\n    \n    def __init__(self, a, b):\n        self.a = a\n        \n    def method1(self):\n        return self.a+' should study!'\n    \n    def method2(self):\n        return self.a+' does not study enough '\n\nclass Child(Parent):\n    \n    def __init__(self, a,b):\n        self.a = a\n        self.b = b\n        \n    def method1(self):\n        return self.a+' should play with ' + self.b\n    \n    def method3(self):\n        return self.a + ' does not play enough'\n\nNote that when inheriting from a class, we indicate the parent class in parentheses in the class statement.\nWe see that method1 is present in both the Parent and Child classes, while method2 is only present in the Parent class. Let us understand how does the Child class use the methods of the Parent class, and what happens if a method with the same name is present in both the parent and child classes.\n\np = Parent('Sam', 'John')\nc = Child('Sam','Pam')\nprint('Parent method 1: ', p.method1())\nprint('Parent method 2: ', p.method2())\nprint()\nprint('Child method 1: ', c.method1())\nprint('Child method 2: ', c.method2())\nprint('Child method 3: ', c.method3())\n\nParent method 1:  Sam should study!\nParent method 2:  Sam does not study enough \n\nChild method 1:  Sam should play with Pam\nChild method 2:  Sam does not study enough \nChild method 3:  Sam does not play enough\n\n\nWe see in the example above that the child has overridden the parent’s method1. The child has inherited the parent’s method2, so it can use it without having to define it. The child also adds some features to the parent class, namely a new variable b and a new method, method3.\n\n6.3.1 Practice exercise 2\nDefine a class that inherits the in-built Python class list, and adds a new method to the class called nunique() which returns the number of unique elements in the list.\nDefine the following list as an object of the class you created. Then:\n\nFind the number of unique elements in the object using the method nunique() of the inherited class.\nCheck if the pop() method of the parent class works to pop an element out of the object.\n\n\nlist_ex = [1,2,5,3,6,5,5,5,12]\n\n\nclass list_v2(list):\n    def nuinque(self):\n        unique_elements = []\n        for x in self:\n            if x not in unique_elements:\n                unique_elements.append(x)\n        return len(unique_elements)\n    \nlist_ex = list_v2(list_ex)\nprint(\"Number of unique elements = \", list_ex.nuinque())\nprint(\"Checking the pop() method, the popped out element is\", list_ex.pop())\n\nNumber of unique elements =  6\nChecking the pop() method, the popped out element is 12\n\n\n\n\n6.3.2 Practice exercise 3\nDefine a class named PasswordManagerUpdated that inherits the class PasswordManager defined in Practice exercise 1. The class PasswordManagerUpdated should have two methods, other than the constructor:\n\nThe method set_password() that sets a new password. The new password must only be accepted if it does not have any punctuations in it, and if it is not the same as one of the old passwords. If the new password is not acceptable, then one of the appropriate messages should be printed - (a) Cannot have punctuation in password, try again, or (b) Old password cannot be reused, try again.\nThe method suggest_password() that randomly sets and returns a password as a string comprising of 15 randomly chosen letters. Letters may be repeated as well.\n\n\nfrom string import punctuation\nimport random as rm\nimport string as st\nclass PasswordManager_updated(PasswordManager):\n    def __init__(self,past_passwords):\n        self.old_passwords = past_passwords.copy()\n    \n    def set_password(self,new_password):\n        if new_password not in self.old_passwords:\n            for punc in punctuation:\n                if punc in new_password:\n                    print(\"Cannot have punctuation in password, try again\")\n                    break\n            self.old_passwords.append(new_password)\n            print(\"password changed!\")\n        else:\n            print(\"Old password cannot be reused, try again.\")\n            \n    def suggest_password(self):\n        suggested_passwd = ''\n        for i in range(15):\n            suggested_passwd = suggested_passwd + st.ascii_lowercase[rm.randint(0,26)]\n        self.old_passwords.append(suggested_passwd)           \n        return suggested_passwd",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Object-Oriented Programming</span>"
    ]
  },
  {
    "objectID": "Variable_expressions_statements-R.html",
    "href": "Variable_expressions_statements-R.html",
    "title": "7  R: Variables, expression and statements",
    "section": "",
    "text": "7.1 Style guide\nWe will use the tidyverse style guide for styling R code.",
    "crumbs": [
      "R",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>R: Variables, expression and statements</span>"
    ]
  },
  {
    "objectID": "Variable_expressions_statements-R.html#data-types",
    "href": "Variable_expressions_statements-R.html#data-types",
    "title": "7  R: Variables, expression and statements",
    "section": "7.2 Data Types",
    "text": "7.2 Data Types\nSome of the commonly used objects in R are numbers - integer and double (or numeric), character and logical (TRUE/FALSE). The data type of the object can be identified using the in-built R function class() or typeof(). For example, see the following objects and their types:\n\nclass(4)\n\n[1] \"numeric\"\n\n\n\ntypeof(4)\n\n[1] \"double\"\n\n\n\nclass(4.4)\n\n[1] \"numeric\"\n\n\n\ntypeof(4.4)\n\n[1] \"double\"\n\n\n\nclass(4L)\n\n[1] \"integer\"\n\n\n\ntypeof(4L)\n\n[1] \"integer\"\n\n\n\nclass('4')\n\n[1] \"character\"\n\n\n\ntypeof('4')\n\n[1] \"character\"\n\n\n\nclass(TRUE)\n\n[1] \"logical\"\n\n\n\ntypeof(FALSE)\n\n[1] \"logical\"",
    "crumbs": [
      "R",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>R: Variables, expression and statements</span>"
    ]
  },
  {
    "objectID": "Variable_expressions_statements-R.html#variable-names",
    "href": "Variable_expressions_statements-R.html#variable-names",
    "title": "7  R: Variables, expression and statements",
    "section": "7.3 Variable names",
    "text": "7.3 Variable names\nWe have the following rules for a R variable name:\n\nA variable name must start with a letter and can be a combination of letters, digits, period(.) and underscore(_). If it starts with period(.), it cannot be followed by a digit.\nA variable name cannot start with a number or underscore (_)\nVariable names are case-sensitive (age, Age and AGE are three different variables)\nReserved words cannot be used as variables (TRUE, FALSE, NULL, if…)",
    "crumbs": [
      "R",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>R: Variables, expression and statements</span>"
    ]
  },
  {
    "objectID": "Variable_expressions_statements-R.html#converting-datatypes",
    "href": "Variable_expressions_statements-R.html#converting-datatypes",
    "title": "7  R: Variables, expression and statements",
    "section": "7.4 Converting datatypes",
    "text": "7.4 Converting datatypes\nSometimes a value may have a datatype that is not suitable for using it. For example, consider the variable called annual_income in the code below:\n\nannual_income = \"80000\"\n\nSuppose we wish to divide annual_income by 12 to get the monthly income. We cannot use the variable annual_income directly as its datatype is a string and not a number. Thus, numerical operations cannot be performed on the variable annual_income.\nWe’ll need to convert annual_income to an integer. For that we will use the R’s in-built as.integer() function:\n\nannual_income = as.integer(annual_income)\nmonthly_income = annual_income/12\nprint(paste0(\"monthly income = \", monthly_income))\n\n[1] \"monthly income = 6666.66666666667\"\n\n\nSimilarly, datatypes can be converted from one type to another using in-built R functions as shown below:\n\n#Converting integer to character\nas.character(9)\n\n[1] \"9\"\n\n\n\n#Converting character to numeric\nas.numeric('9.4')\n\n[1] 9.4\n\n\n\n#Converting logical to integer\nas.numeric(FALSE)\n\n[1] 0\n\n\nNote that any non-zero numeric value, if converted to the ‘logical’ datatype, will return TRUE, while converting 0 to the ‘logical’ datatype will return FALSE. Only numeric values can be converted to the ‘logical’ datatype.\n\n# Converting integer to logical\nas.logical(40)\n\n[1] TRUE\n\n\n\n# Converting integer to logical\nas.logical(0)\n\n[1] FALSE\n\n\n\n# Converting integer to logical\nas.logical(-30.1)\n\n[1] TRUE\n\n\nSometimes, conversion of a value may not be possible. For example, it is not possible to convert the variable greeting defined below to a number:\n\ngreeting = \"hello\"\n\nHowever, strings can be concatenated using the paste0() function:\n\npaste0(\"hello\", \" there!\")\n\n[1] \"hello there!\"\n\n\nR’s in-built readline() function can be used to accept an input from the user. For example, suppose we wish the user to input their age:\n\nage = readline(\"Enter your age:\")\n\nEnter your age:\n\n\nThe entered value is stored in the variable age and can be used for computation.",
    "crumbs": [
      "R",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>R: Variables, expression and statements</span>"
    ]
  },
  {
    "objectID": "control_flow.html",
    "href": "control_flow.html",
    "title": "8  R: Control flow statements",
    "section": "",
    "text": "8.1 The if - else if - else statement\nThe if - else if - else statements can check several conditions, and execute the code corresponding to the condition that is true. Note that there can be as many else if statements as required.\nSyntax: R uses curly braces {} to identify the code to be executed if a condition is true. All the code in the curly braces within a condition is executed if the condition is true.\nExample: Input a number. Print whether it is positive, negative or zero. If it is negative, print its absolute value.\nnumber = readline(\"Enter a number:\")\n\nEnter a number:\nnumber = '3'\nnumber_integer = as.integer(number)\n\nif (number_integer&gt;0) {\n  print(\"Number is positive\")\n} else if (number_integer==0) {\n  print(\"Number is zero\")\n} else {\n  print(\"Number is negative\")\n}\n\n[1] \"Number is positive\"",
    "crumbs": [
      "R",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>R: Control flow statements</span>"
    ]
  },
  {
    "objectID": "control_flow.html#trycatch",
    "href": "control_flow.html#trycatch",
    "title": "8  R: Control flow statements",
    "section": "8.2 TryCatch",
    "text": "8.2 TryCatch\nIf we suspect that some lines of code may produce an error or a warning, we can put them in a tryCatch() statement, and if an error does occur, we can use the warning or the error argument to instead execute an alternative piece of code. Both the warning and error arguments have a function that is executed in case of warnings and errors respectively. The argument to this function is the warning / error message. The program will direct the code to the relevant function if an error or warning occurs.\nExample: Input an integer from the user. If the user inputs a valid integer, print whether it is a multiple of 3. However, if the user does not input a valid integer, print a message saying that the input is invalid.\n\nnum = readline(\"Enter a number:\")\n\nEnter a number:\n\n\n\nnum = '3r'\n\n\ntryCatch(\n  { \n    num_int = as.integer(num)   \n    if (num_int %% 3 == 0) {\n      print(\"Number is a multiple of 3\")\n    } else {\n      print(\"Number is not a multiple of 3\")\n    }\n  },\n  warning = function(w)  print(\"Input must be an integer\") \n)\n\n[1] \"Input must be an integer\"",
    "crumbs": [
      "R",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>R: Control flow statements</span>"
    ]
  },
  {
    "objectID": "control_flow.html#loops",
    "href": "control_flow.html#loops",
    "title": "8  R: Control flow statements",
    "section": "8.3 Loops",
    "text": "8.3 Loops\n\n8.3.1 for loop\nWe use the : operator to define a vector of consecutive integers. For example, the sequence of integers from 1 to 10 can be generated with the code 1:10. Usually, we generate a sequence in this manner to iterate over the sequence with a for loop.\nExample: Print the first \\(n\\) elements of the Fibonacci sequence, where \\(n\\) is an integer input by the user, such that \\(n&gt;2\\). In a fibonacci sequence, each number is the sum of the preceding two numbers, and the sequence starts from \\(0,1\\). The sequence is as follows:\n\\(0,1,1,2,3,5,8,13,....\\)\n\nn = readline(\"Enter a number:\")\n\nEnter a number:\n\n\n\nn = 6\n\n\n#Initializing the sequence to start from 0, 1\nn1 = 0 \nn2 = 1\n\n#Printing the first two numbers of the sequence\nelements &lt;- c(n1, n2)\n\nfor (i in 1:(n - 2)) {  \n  #Since two numbers of the sequence are already printed,n-2 numbers are required \n  #Computing the next number of the sequence as the summation of the previous two numbers\n  n3 = n1 + n2\n  elements &lt;-c (elements, n3)\n  \n  #As 'n3' is already printed, it is no longer the next number of the sequence. \n  #Thus, we move the values of the variables n1 and n2 one place to the right to compute the next number of the sequence.\n  n1 = n2\n  n2 = n3  \n}\nprint(elements)\n\n[1] 0 1 1 2 3 5\n\nprint(paste0(\"These are the first \", n, \" elements of the fibonacci series\"))\n\n[1] \"These are the first 6 elements of the fibonacci series\"\n\n\n\n\n8.3.2 while loop\nExample: Print all the elements of the Fibonacci sequence less than n, where n is an integer input by the user, such that n&gt;2. In a fibonacci sequence, each number is the sum of the preceding two numbers, and the sequence starts from 0,1. The sequence is as follows:\n0,1,1,2,3,5,8,13,..\n\nn = readline(\"Enter a number:\")\n\nEnter a number:\n\n\n\nn = 50\n\n\n#Initializing the sequence to start from 0, 1\nn1 = 0 \nn2 = 1\n\n#Printing the first number of the sequence\nelements &lt;- n1\nwhile (n2 &lt; n) {\n  #Print the next number of the sequence\n  elements &lt;- c(elements, n2)\n  \n  #Comptuing the next number of the sequence as the summation of the previous two numbers\n  n3 = n1 + n2\n  \n  #As n2 is already printed, assigning n2 to n3, so that the next number of the sequence (i.e., currently n3) is printed if the program enters the loop again\n  #Assigning n1 to n2 as n1 has already been used to compute the next number of the seqeunce (i.e., currently n3). \n  n1 = n2\n  n2 = n3  \n}\nprint(elements)\n\n [1]  0  1  1  2  3  5  8 13 21 34\n\nprint(paste(\"These are all the elements of the fibonacci series less than\", n))\n\n[1] \"These are all the elements of the fibonacci series less than 50\"",
    "crumbs": [
      "R",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>R: Control flow statements</span>"
    ]
  },
  {
    "objectID": "control_flow.html#break-statement",
    "href": "control_flow.html#break-statement",
    "title": "8  R: Control flow statements",
    "section": "8.4 break statement",
    "text": "8.4 break statement\nThe break statement is used to unconditionally exit the innermost loop.\nFor example, suppose we need to keep asking the user to input year of birth and compute the corresponding age, until the user enters 1900 as the year of birth.\n\n#The loop will continue to run indefinitely as the condition 'True' is always true\nwhile (TRUE) {\n  year = (readline(\"Enter year of birth:\"))\n  year = as.integer(year)\n  if (year == 1900) break \n  else print(paste(\"Age = \",2022 - year))\n}",
    "crumbs": [
      "R",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>R: Control flow statements</span>"
    ]
  },
  {
    "objectID": "control_flow.html#next-statement",
    "href": "control_flow.html#next-statement",
    "title": "8  R: Control flow statements",
    "section": "8.5 next statement",
    "text": "8.5 next statement\nThe next statement is used to continue with the next iteration of the loop without executing the lines of code below it.\nFor example, consider the following code:\n\nfor (i in 1:10) {\n  if (i %% 2 == 0) next\n  print(i)\n}\n\n[1] 1\n[1] 3\n[1] 5\n[1] 7\n[1] 9\n\n\nWhen the control flow reads the statement next, it goes back to the beginning of the for loop, and ignores the lines of code below the statement.\n\n8.5.1 Practice exercise\nWrite a program that asks the user the question, “How many stars are in the Milky Way (in billions)?”. If the user answers 100, the program should print correct, and stop. However, if the user answers incorrectly, the program should print “incorrect”, and ask them if they want to try again. The program should continue to run until the user answers correctly, or they want to stop trying.\n\nwhile (TRUE) {\n  answer = readline(\"How many stars are there in the Milky Way (in billions)? \")\n  if (answer == '100') {\n    print(\"Correct\")\n    break\n  } else {\n    print(\"Incorrect\")\n  }\n  try_again = readline(\"Do you want to try again? (Y/N):\")\n  if (try_again == 'Y') {\n    next\n  } else {\n    break\n  }\n}",
    "crumbs": [
      "R",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>R: Control flow statements</span>"
    ]
  },
  {
    "objectID": "control_flow.html#loops-with-the-character-vector",
    "href": "control_flow.html#loops-with-the-character-vector",
    "title": "8  R: Control flow statements",
    "section": "8.6 Loops with the character vector",
    "text": "8.6 Loops with the character vector\nLoops can be used to iterate over the elements in a character vector, just like we used them to iterate over a sequence of integers. The function nchar is used to get the number of characters in the character vector/\nConsider the following character vector:\n\nsentence = 'She sells sea shells on the sea shore'\n\nThe length of the character vector is:\n\nnchar(sentence)\n\n[1] 37\n\n\nSlicing a character data: The function substr() is used to slice a character vector from the start index to the stop index. Note that the indices in R start from 1, instead of 0. For example, let us slice the object sentence from the \\(5^{th}\\) index to the \\(9^{the}\\) index:\n\nsubstr(sentence, 5, 9)\n\n[1] \"sells\"\n\n\nExample: Define a character vector and count the number of ts.\n\nchar_vec = 'Getting a tatto is not a nice experience'\n#Initializing a variable 'count_t' which will store the number of 't's in the string\ncount_t = 0\n\n#Iterating over the entire length of the string. \n#The length of the string is given by the len() function\nfor (i in 1:nchar(char_vec)) {\n  if (substr(char_vec, i, i) == 't') {\n    count_t &lt;- count_t + 1\n  }\n}\nprint(paste(\"Number of 't's in the string = \", count_t))\n\n[1] \"Number of 't's in the string =  6\"\n\n\n\n8.6.1 Practice exercise\nWrite a program that prints the number of ’the’s found in sentence\n\nsentence = \"She sells the sea shells on the sea shore during the summer\"\ncount = 0\nfor (i in 1:(nchar(sentence) - nchar(\"the\"))) {\n  if (substr(sentence, i, i + nchar(\"the\") - 1) == \"the\") {\n    count = count + 1\n  }\n}\nprint(paste(\"Number of thes in the sentence = \", count))\n\n[1] \"Number of thes in the sentence =  3\"",
    "crumbs": [
      "R",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>R: Control flow statements</span>"
    ]
  },
  {
    "objectID": "control_flow2.html",
    "href": "control_flow2.html",
    "title": "9  R: Functions",
    "section": "",
    "text": "9.1 Defining a function\nFunctions in R are defined using the keyword function(). All the statements within a function are enclosed with {} braces. Look at the function defined below. It takes an integer as an argument, and prints whether the integer is odd or even.\nodd_even &lt;- function(intgr) {\n  if (intgr %% 2 == 0) {\n    print(\"even\")\n  } else {\n      print(\"odd\")\n  }\n}\n\nodd_even(3)\n\n[1] \"odd\"",
    "crumbs": [
      "R",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>R: Functions</span>"
    ]
  },
  {
    "objectID": "control_flow2.html#defining-a-function",
    "href": "control_flow2.html#defining-a-function",
    "title": "9  R: Functions",
    "section": "",
    "text": "9.1.1 Practice exercise\nWrite a function that returns all prime numbers between \\(a\\) and \\(b\\), where \\(a\\) and \\(b\\) are parameters of the function.\n\nprime &lt;- function(a, b) {\n  prime_numbers &lt;- c()\n  for (number in a:b) {\n    prime = 1\n    \n    for (factor in 2:(number - 1)) {\n      if (number %% factor == 0) {\n        prime = 0\n      }\n    }\n    \n    if (prime == 1) prime_numbers &lt;- c(prime_numbers, number)\n  }\n  return(prime_numbers)\n}\nprime(40, 60)\n\n[1] 41 43 47 53 59",
    "crumbs": [
      "R",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>R: Functions</span>"
    ]
  },
  {
    "objectID": "robjects.html",
    "href": "robjects.html",
    "title": "10  R: Objects",
    "section": "",
    "text": "10.1 Atomic vectors\nAn atomic vector in R is a vector containing objects of the same datatype. If the objects are not of the same datatype, then they are coerced to be of the same datatype. It is defined using the keyword c().\nnumbers = c(1, 2, 67)\nThe in-built R function length() is used to find the length of an atomic vector.\nlength(numbers)\n\n[1] 3",
    "crumbs": [
      "R",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>R: Objects</span>"
    ]
  },
  {
    "objectID": "robjects.html#atomic-vectors",
    "href": "robjects.html#atomic-vectors",
    "title": "10  R: Objects",
    "section": "",
    "text": "10.1.1 Slicing the atomic vector\n\n10.1.1.1 Slicing using indices\nAn atomic vector can be sliced using the indices of the elements within [] brackets.\nFor example, consider the vector:\n\nvec &lt;- 1:40\n\nSuppose, we wish to get the \\(3^{rd}\\) element of the vector. We can get it using the index 3:\n\nvec[3]\n\n[1] 3\n\n\nA sequence of consecutive elements can be sliced using the indices of the first element and the last element around the : operator. For example, let us slice elements from the \\(3^{rd}\\) index to the \\(10^{th}\\) element of the vector vec:\n\nvec[3:10]\n\n[1]  3  4  5  6  7  8  9 10\n\n\nWe can slice elements at different indices by putting the indices in an atomic vector within the [] brackets. Let us slice the \\(4^{th}\\), \\(7^{th}\\), and \\(18^{th}\\) elements of the vector vec:\n\nvec[c(4,7,18)]\n\n[1]  4  7 18\n\n\nWe can slice consecutive elements, and non-consecutive elements simultaneously. Let us slice the elements from the \\(4^{th}\\) index to the \\(9^{th}\\) index and the \\(30^{th}\\) and \\(36^{th}\\) element.\n\nvec[c(4:9,30,36)]\n\n[1]  4  5  6  7  8  9 30 36\n\n\n\n\n10.1.1.2 Slicing using a logical atomic vector\nAn atomic vector can be sliced using a logical atomic vector of the same length. The logical atomic vector will have TRUE values corresponding to the indices where the element is to be selected, and FALSE where the element is to be discarded. See the example below.\n\nvec &lt;- 1:5\nvec[c(TRUE, FALSE, FALSE, TRUE, FALSE)]\n\n[1] 1 4\n\n\n\n\n\n10.1.2 Removing elements from atomic vector\nElements can be removed from the vector using the negative sign within [] brackets.\nRemove the 2nd element from the vector:\n\nvec &lt;- 1:5\nvec[-2]\n\n[1] 1 3 4 5\n\n\nIf multiple elements need to be removed, the indices of the elements to be removed can be given as an atomic vector.\nRemove elements 2 to 6 and element 10 from the vector:\n\nvec &lt;- 1:20\nvec[-c(2:6, 10)]\n\n [1]  1  7  8  9 11 12 13 14 15 16 17 18 19 20\n\n\nExample: USA’s GDP per capita from 1960 to 2021 is given by the vector G in the code chunk below. The values are arranged in ascending order of the year, i.e., the first value is for 1960, the second value is for 1961, and so on. Store the years in which the GDP per capita of the US increased by more than 10%, in a vector.\n\nG = c(3007, 3067, 3244, 3375,3574, 3828, 4146, 4336, 4696, 5032,5234,5609,6094,6726,7226,7801,8592,9453,10565,11674,12575,13976,14434,15544,17121,18237,19071,20039,21417,22857,23889,24342,25419,26387,27695,28691,29968,31459,32854,34515,36330,37134,37998,39490,41725,44123,46302,48050,48570,47195,48651,50066,51784,53291,55124,56763,57867,59915,62805,65095,63028,69288)\n\n\nyears &lt;- c()\nfor (i in 1:(length(G) - 1)) {\n  diff = (G[i+1] - G[i]) / G[i]\n  if (diff &gt; 0.1) years &lt;- c(years, 1960 + i)\n}\nprint(years)\n\n[1] 1973 1976 1977 1978 1979 1981 1984\n\n\n\n\n10.1.3 Element-wise operations on atomic vectors\nWhen we use arithmetic operators like +, -, *, etc., or comparison operators like &gt;, &gt;=, ==, etc., between atomic vectors, then these operators are applied element-wise on the elements of the respective atomic vectors with the same index. Consider the examples below.\n\nvec1 &lt;- 1:4\nvec2 &lt;- 1:4\nvec1 + vec2\n\n[1] 2 4 6 8\n\n\n\nvec1 &gt; vec2\n\n[1] FALSE FALSE FALSE FALSE\n\n\nIt is highly recommended that these operators be applied on atomic vectors of the same length. Otherwise, the vector of the smaller length will broadcast (or repeat itself) to match the length of the larger vector. A warning will be returned if the length of the longer vector is not a multiple of the length of the shorter vector. Broadcasting may be difficult to interpret, especially when arithmetic operators are being applied on more than 2 atomic vectors of different lengths.\nIf an operator is applied between an atomic vector and a scalar, then the operation is performed on each element of the atomic vector and the scalar. See the examples below.\n\nvec1*4\n\n[1]  4  8 12 16\n\n\n\nvec1 &gt; 2\n\n[1] FALSE FALSE  TRUE  TRUE\n\n\nSuppose, we wish to slice all elements from the object vec that are greater than 2. Here is one approach to do it. We will apply the &gt; operator between vec and 2 to obtain a logical vector that is TRUE on indices where the condition is satisfied, and FALSE otherwise. We will then use this logical vector to slice vec. Below is the code.\n\nvec1[vec1 &gt; 2]\n\n[1] 3 4\n\n\nNow, solve the previous example without using a for loop.\n\n\n10.1.4 The seq() function\nThe seq() function is used to generate an atomic vector consisting of a sequence of integers with a constant gap. For example, the code below generates a sequence of integers starting from 20 upto 60 with gaps of 5.\n\nseq(20, 60, 5)\n\n[1] 20 25 30 35 40 45 50 55 60\n\n\n\n\n10.1.5 The rep() function\nThe rep() function is used to repeat an object a fixed number of times.\n\nrep(4, 10)\n\n [1] 4 4 4 4 4 4 4 4 4 4\n\n\n\nrep(c(2, 3), 10)\n\n [1] 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3\n\n\n\n\n10.1.6 The which() function\nThe which() function is used to find the indices of TRUE elements in a logical atomic vector.\n\nvec &lt;- c(8, 3, 4, 7, 9, 7, 5)\n\n\nwhich(vec == 8)\n\n[1] 1\n\n\nIn the above code, a logical vector is being created with vec == 8, and the which() function is returning the indices of the TRUE elements.\nThe index of the maximum and minimum values can be found using which.max() and which.min() respectively. In case of multple maximum or minimum elements, the smallest index is returned.\n\nwhich.max(vec)\n\n[1] 5\n\n\n\nwhich.min(vec)\n\n[1] 2\n\n\n\n\n10.1.7 Practice exercise 1\nBelow is a vector consisting of responses to the question: “At what age do you think you will marry?” from students of the STAT303-1 Fall 2022 class.\n\nexp_marriage_age &lt;- c('24','30','28','29','30','27','26','28','30+','26','28','30','30','30','probably never','30','25','25','30','28','30+ ','30','25','28','28','25','25','27','28','30','30','35','26','28','27','27','30','25','30','26','32','27','26','27','26','28','37','28','28','28','35','28','27','28','26','28','26','30','27','30','28','25','26','28','35','29','27','27','30','24','25','29','27','33','30','30','25','26','30','32','26','30','30','I wont','25','27','27','25','27','27','32','26','25','never','28','33','28','35','25','30','29','30','31','28','28','30','40','30','28','30','27','by 30','28','27','28','30-35','35','30','30','never','30','35','28','31','30','27','33','32','27','27','26','N/A','25','26','29','28','34','26','24','28','30','120','25','33','27','28','32','30','26','30','30','28','27','27','27','27','27','27','28','30','30','30','28','30','28','30','30','28','28','30','27','30','28','25','never','69','28','28','33','30','28','28','26','30','26','27','30','25','Never','27','27','25')\n\n\n10.1.7.1 Cleaning data\nRemove the elements that are not integers - such as ‘probably never’, ‘30+’, etc. Convert the reamining elements to integer. What is the length of the new vector?\n\nnew_vector &lt;- as.integer(exp_marriage_age)\n\nWarning: NAs introduced by coercion\n\nnumeric_values &lt;- new_vector[!is.na(new_vector)]\nlength(numeric_values)\n\n[1] 181\n\n\n\n\n10.1.7.2 Capping unreasonably high values\nCap the values greater than 80 to 80, in the clean vector obtained above. What is the mean age when people expect to marry in the new vector?\n\nnumeric_values[numeric_values &gt; 80] &lt;- 80\nmean(numeric_values)\n\n[1] 28.9558\n\n\n\n\n10.1.7.3 People marrying at 30 or more\nDetermine the percentage of people who expect to marry at an age of 30 or more.\n\nsum(numeric_values &gt;= 30) / length(numeric_values)\n\n[1] 0.3701657\n\n\n\n\n\n10.1.8 The sapply() function\nThe sapply() function is used to apply a function on all the elements of a list, atomic vector or matrix.\nFor example, consider the vector below:\n\nvec &lt;- 1:6\nvec\n\n[1] 1 2 3 4 5 6\n\n\nSuppose, we wish to square each element of the vector. We can use the sapply() function as below:\n\nsapply(vec, FUN = function(x) x**2)\n\n[1]  1  4  9 16 25 36\n\n\n\n\n10.1.9 Practice exercise 2\nWrite a function that identifies if a word is a palindrome (A palindrome is a word that reads the same both backwards and forwards, for example, peep, rotator, madam, etc.). Apply the function to the vector of words below to count the number of palindrome words.\n\nwords_vec &lt;- c('fat', 'civic', 'radar', 'mountain', 'noon','papa')\n\n\npalindrome &lt;- function(word) {\n  for (i in 1:as.integer(nchar(word)/2)) {\n    if (substr(word, i, i) != substr(word, nchar(word) - (i-1), nchar(word) - (i-1))) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\nsum(sapply(words_vec, palindrome))\n\n[1] 3",
    "crumbs": [
      "R",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>R: Objects</span>"
    ]
  },
  {
    "objectID": "robjects.html#matrix",
    "href": "robjects.html#matrix",
    "title": "10  R: Objects",
    "section": "10.2 Matrix",
    "text": "10.2 Matrix\nMatrices are two-dimensional arrays. The in-built function matrix() is used to define a matrix. An atomic vector can be organized as a matrix by specifying the number of rows and columns.\nFor example, let us define a 2x3 matrix (2 rows and 3 columns) consisting of consecutive integers fro1 1 to 6.\n\nmat &lt;- matrix(1:6, 2, 3)\nmat\n\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n\n\nNote that the integers fill up column-wise in the matrix. If we wish to fill-up the matrix by row, we can use the byrow argument.\n\nmat &lt;- matrix(1:6, 2, 3, byrow = TRUE)\nmat\n\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n\n\nThe functions nrow() and ncol() can be used to get the number of rows and columns of the matrix respectively.\n\nnrow(mat)\n\n[1] 2\n\n\n\nncol(mat)\n\n[1] 3\n\n\nMatrices can be sliced using the indices of row and column separated by a , in box brackets. Suppose we wish to get the element in the \\(2^{nd}\\) row and \\(3^{rd}\\) column of the matrix:\n\nmat[2, 3]\n\n[1] 6\n\n\nFor selecting all rows or columns of a matrix, the index for the row/column can be left blank. Suppose we wish to get all the elements of the \\(1^{st}\\) of the matrix:\n\nmat[1, ]\n\n[1] 1 2 3\n\n\nRow and columns of the matrix can be sliced using the : operator. Suppose we want to select a sub-matrix that has elements in the first two rows and columns 2 and 3 of the matrix mat:\n\nmat[1:2, 2:3]\n\n     [,1] [,2]\n[1,]    2    3\n[2,]    5    6\n\n\nElement-wise arithmetic operations can be performed between 2 matrices of the same shape.\n\nmat1 &lt;- matrix(1:6, 2, 3)\nmat2 &lt;- matrix(c(9, 2, 6, 5, 1, 0), 2, 3)\nmat1 + mat2\n\n     [,1] [,2] [,3]\n[1,]   10    9    6\n[2,]    4    9    6\n\n\n\nmat1 - mat2\n\n     [,1] [,2] [,3]\n[1,]   -8   -3    4\n[2,]    0   -1    6\n\n\nSuppose we need to sum up all the rows of the matrix. We can do it using a for loop as follows:\n\nrow_sum &lt;- c(0,0)\nfor (i in 1:nrow(mat)) {\n  for (j in 1:ncol(mat)) {\n    row_sum[i] &lt;- row_sum[i] + mat[i, j]\n  }\n}\nrow_sum\n\n[1]  6 15\n\n\nObserve that in the above for loop, elements of each row are added one at a time. We can add all the elements of a row simultaneously using the sum() function. This will reduce a for loop from the above code:\n\nrow_sum &lt;- c(0,0)\nfor (i in 1:nrow(mat)){\n  row_sum[i] &lt;- sum(mat[i,])\n}\nrow_sum\n\n[1]  6 15\n\n\nIn the above code, we sum up all the elements of the row simultaneously. However, we still need to sum up the elements of each row one at a time.\n\n10.2.1 The apply() function\nThe apply() function can be used to apply a function on each row or column of a matrix. Thus, this function helps avoid the user to write a for() loop in R to iterate over all the rows and columns of the matrix. Note that each row / column of a matrix is an atomic vector. Thus, vectorized computations can be performed within the function, resulting in efficient computations.\nNote that the apply functions use a for() loop under-the-hood, and thus the function will be applied sequentially on each row / column of the matrix. However, as the implementation of the for() loop is in C, it is likely to be faster than a for() loop in R.\nLet us use the apply() function to sum up all the rows of the matrix mat.\n\napply(mat, 1, sum)\n\n[1]  6 15\n\n\nLet us compare the time taken to sum up rows of a matrix using a for loop with the time taken using the apply() function.\n\noptions(digits.secs = 6)\nstart.time &lt;- Sys.time()\nrow_sum&lt;-c(0, 0)\nfor (i in 1:nrow(mat)){\n  row_sum[i] &lt;- sum(mat[i,])\n}\nrow_sum\n\n[1]  6 15\n\nend.time &lt;- Sys.time()\ntime.taken &lt;- end.time - start.time\ntime.taken\n\nTime difference of 0.005057812 secs\n\n\n\nstart.time &lt;- Sys.time()\napply(mat, 1, sum)\n\n[1]  6 15\n\nend.time &lt;- Sys.time()\ntime.taken &lt;- end.time - start.time\ntime.taken\n\nTime difference of 0.001498461 secs\n\n\nObserve that the apply() function takes much lesser time to sum up all the rows of the matrix as compared to the for loop.\nRecall the earlier example where we computed year’s in which the increase in GDP per capita was more than 10%. Let us use matrices to solve the problem. We’ll also compare the time it takes using a matrix with the time it takes using for loops.\n\nstart.time &lt;- Sys.time()\n\n#Let the first column of the matrix be the GDP of all the years except 1960, and the second column be the GDP of all the years except 2021.\nGDP_mat &lt;- matrix(c(G[-1], G[-length(G)]), length(G) - 1, 2)\n\n#The percent increase in GDP can be computed by performing computations using the 2 columns of the matrix\ninc &lt;- (GDP_mat[,1] - GDP_mat[,2]) / GDP_mat[,2]\nyears &lt;- 1961:2021\nyears &lt;- years[inc &gt; 0.1]\nyears\n\n[1] 1973 1976 1977 1978 1979 1981 1984\n\nend.time &lt;- Sys.time()\ntime.taken &lt;- end.time - start.time\ntime.taken\n\nTime difference of 0.006853819 secs\n\n\nWithout matrices, the time taken to perform the same computation is measured with the code below.\n\nstart.time &lt;- Sys.time()\nyears &lt;- c()\nfor (i in 1:(length(G) - 1)) {\n  diff = (G[i+1] - G[i]) / G[i]\n  if (diff &gt; 0.1) years &lt;- c(years, 1960 + i)\n}\nprint(years)\n\n[1] 1973 1976 1977 1978 1979 1981 1984\n\n#print(proc.time()[3]-start_time)\nend.time &lt;- Sys.time()\ntime.taken &lt;- end.time - start.time\ntime.taken\n\nTime difference of 0.008019209 secs\n\n\nObserve that matrices reduce the execution time of the code as computations are performed simultaneously, in contrast to a for loop where computations are performed one at a time.\nSometimes, the computations on rows / columns of a matrix are not straighforward and we may need to use the apply() function to apply a function on each row / column of a matrix.\nExample: Find the maximum GDP per capita of the US in each of the 5 year periods starting from 1961-1965, and upto 2015-2020.\n\nGDP_5year &lt;- matrix(G[-c(1, length(G))], 12, 5, byrow = TRUE)\nGDP_max_5year &lt;- apply(GDP_5year, 1, max)\n\nIn the above code, we applied the in-built function max on all the rows. Sometimes, an in-built function may not be available for the computations to be performed. In such as case, we can write our own user-defined function within the apply() function. See the example below.\nExample: Find the range (max-min) of GDP per capita of the US in each of the 5 year periods starting from 1961-1965, and upto 2015-2020.\n\nGDP_5year &lt;- matrix(G[-c(1, length(G))], 12, 5, byrow = TRUE)\nGDP_range_5year &lt;- apply(GDP_5year, 1, function(x) max(x) - min(x))\nGDP_range_5year\n\n [1]  761 1088 2192 3983 4261 4818 4349 6362 6989 2349 6697 7228\n\n\nIn the code above we applied a user-defined function on each row of the matrix. However, if the function has multiple lines, it may be inconvenient to write the function within the apply() function. In that case, we can define the function outside the apply() function.\nExample: Find the five year periods starting from 1961-1965, and upto 2016-2020, during which the GDP per capita decreased as compared to the previous year.\n\nGDP_inc &lt;- function (GDP_5yr) {\n  dec &lt;- 0\n  for (i in 1:4) {\n    if(GDP_5yr[i+1] &lt; GDP_5yr[i]) dec &lt;- 1\n  }\n  return(dec)\n}\n\nGDP_5year_mat &lt;- matrix(G[-c(1,length(G))], 12, 5, byrow = TRUE)\nyears_inc_dec &lt;- apply(GDP_5year_mat, 1, GDP_inc)\nfive_year_periods &lt;- seq(1960, 2015, 5)\nprint(\"Five year periods in which the GDP per capita decreased are those starting from the years:\")\n\n[1] \"Five year periods in which the GDP per capita decreased are those starting from the years:\"\n\nprint(five_year_periods[years_inc_dec == 1] + 1)\n\n[1] 2006 2016\n\n\nThe 5 year periods during which the GDP per capita decreased as compared to the previous year are 2006-2010, and 2016-2020.\n\n\n10.2.2 Practice exercise 3\nFind the 5 year period in which the difference of the maximum GDP per capita and the minimum GDP per capita as a percentage of the minimum GDP per capita was the highest.\nSolution:\n\nfive_year_periods[which.max(apply(GDP_5year_mat, 1, function(x) (max(x) - min(x)) / min(x)))] + 1\n\n[1] 1976\n\n\n\nprint(\"During 1976-1980 the difference of the maximum GDP per capita and the minimum GDP per capita as a percentage of the minimum GDP per capita was the highest.\")\n\n[1] \"During 1976-1980 the difference of the maximum GDP per capita and the minimum GDP per capita as a percentage of the minimum GDP per capita was the highest.\"\n\n\n\n\n10.2.3 Practice exercise 4\nThe object country_names is an atomic vector consisting of country names. The object coordinates_capital_cities is a matrix consisting of the latitude-longitude pair of the capital city of the respective country. The order of countries in country_names is the same as the order in which their capital city coordinates (latitude-longitude) appear in the matrix coordinates_capital_cities.\nDownload the file capital_cities.csv from here. Make sure the file is in your current working directory. Execute the following code to obtain the objects coordinates_capital_cities and country_names.\n\ncapital_cities &lt;- read.csv('capital_cities.csv')\ncoordinates_capital_cities &lt;- as.matrix(capital_cities[,c(3, 4)])\ncountry_names &lt;- capital_cities[,1]\n\n\n10.2.3.1 Country with capital closest to DC\nPrint the name and coordinates of the country with the capital city closest to the US capital - Washington DC.\nNote that:\n\nThe Country Name for US is given as United States in the data.\nThe ‘closeness’ of capital cities from the US capital is based on the Euclidean distance of their coordinates to those of the US capital.\n\nHint:\n\nGet the coordinates of Washington DC from coordinates_capital_cities. The row that contains the coordinates of DC will have the same index as United States has in the vector country_names\nCreate a matrix that has coordinates of Washington DC in each row, and has the same number of rows as the matrix coordinates_capital_cities.\nSubtract coordinates_capital_cities from the matrix created in (2). Element-wise subtraction will occur between the matrices.\nUse the apply() function on the matrix obtained above to find the Euclidean distance of Washington DC from the rest of the capital cities.\nUsing the distances obtained above, find the country that has the closest capital to DC.\n\n\n\n10.2.3.2 Top 10 countries closest to DC\n\nPrint the names of the countries of the top 10 capital cities closest to the US capital - Washington DC.\nCreate and print a matrix containing the coordinates of the top 10 capital cities closest to Washington DC.\n\n\nUS_index = which(country_names == 'United States')\ndc_coord &lt;- coordinates_capital_cities[US_index,]\ndistances_to_DC &lt;- apply(coordinates_capital_cities, 1, \n                  function(city_coord) sqrt(sum((city_coord - dc_coord)**2)))\nnum_of_countries &lt;- length(country_names)\ndistances_to_DC_matrix &lt;- cbind(1:num_of_countries, distances_to_DC)\nsorted &lt;- distances_to_DC_matrix[order(distances_to_DC_matrix[,2]),]\n\nTop 10 countries with capitals closest to Washington DC are the following:\n\ncountry_names[sorted[3:12, 1]]\n\nThe coordinates of the top 10 capital cities closest to Washington DC are:\n\ncoordinates_capital_cities[sorted[3:12, 1],]",
    "crumbs": [
      "R",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>R: Objects</span>"
    ]
  },
  {
    "objectID": "robjects.html#lists",
    "href": "robjects.html#lists",
    "title": "10  R: Objects",
    "section": "10.3 Lists",
    "text": "10.3 Lists\nAtomic vectors and matrices are quite useful in R. However, a constraint with them is that they can only contain objects of the same datatype. For example, an atomic vector can contain all numeric objects, all character objects, or all logical objects, but not a mixture of multiple types of objects. Thus, there arises a need for a list data structure that can store objects of multiple datatypes.\nA list can be defined using the list() function. For example, consider the list below:\n\nlist_ex &lt;- list(1, \"apple\", TRUE, list(\"another list\", TRUE))\n\nThe list list_ex consists of objects of mutiple datatypes. The length of the list can be obtained using the length()function:\n\nlength(list_ex)\n\n[1] 4\n\n\nA list is an ordered collection of objects. Each object of the list is associated with an index that corresponds to its order of occurrence in the list.\nA single element can be sliced from the list by specifying its index within the [[]] operator. Let us slice the \\(2^{nd}\\) element of the list list_ex:\n\nlist_ex[[2]]\n\n[1] \"apple\"\n\n\nMultiple elements can be sliced from the list by specifying the indices as an atomic vector within the [] operator. Let us slice the \\(1^{st}\\) and \\(3^{rd}\\) elements from the list list_ex:\n\nlist_ex[c(1,3)]\n\n[[1]]\n[1] 1\n\n[[2]]\n[1] TRUE\n\n\nElements of a list can be named using the names() function. Let us name the elements of list_ex:\n\nnames(list_ex) &lt;- c(\"Name1\", \"second_name\", \"3rd_element\", \"Number 4\")\n\nA single element can be sliced from the list using the name of the element with the $ operator. Let us slice the element named as second_name from the list list_ex:\n\nlist_ex$second_name\n\n[1] \"apple\"\n\n\nNote that if the name of the element does not begin with a letter or has special characters such as a space, then it should be specified within single quotes after the $ operator. For example, let us slice the element named as 3rd_element from the list list_ex:\n\nlist_ex$`3rd_element`\n\n[1] TRUE\n\n\nNames of elements of a list can also be specified while defining the list, as in the example below:\n\nlist_ex_with_names &lt;- list(movie = 'The Dark Knight', IMDB_rating = 9)\n\nA list can be converted to an atomic vector using the unlist() function. For example, let us convert the list list_ex to a vector:\n\nunlist(list_ex)\n\n         Name1    second_name    3rd_element      Number 41      Number 42 \n           \"1\"        \"apple\"         \"TRUE\" \"another list\"         \"TRUE\" \n\n\nSince a vector can contain objects of a single datatype, note that all objects have been converted to the character datatype in the vector above.\n\n10.3.1 Practice exercise 5\nDownload the dataset movies.json. Execute the following code to read the data into the object movies:\n\nlibrary(rjson)\nmovies&lt;-fromJSON(file = 'movies.json')\n\n\n10.3.1.1 \nWhat is the datatype of the object movies?\n\nclass(movies)\n\nThe datatype of the object movies is list.\n\n\n10.3.1.2 \nCount the number movies having a negative profit, i.e., their production budget is higher than their worldwide gross.\nIgnore the movies that:\n\nHave missing values of production budget or worldwide gross. Use the is.null() function to identify missing or NULL values.\nHave a zero worldwide gross (A zero worldwide gross is probably an incorrect value).\n\n\nnegative_profit &lt;- c()\ncount &lt;- 0\nfor (i in 1:length(movies)) {\n  pb &lt;- movies[[i]]$`Production Budget`\n  wg &lt;- movies[[i]]$`Worldwide Gross`\n  if (!(is.null(pb) | is.null(wg))) {\n    if (pb &gt; wg & wg &gt; 0) {\n      count &lt;- count + 1\n    }\n  }\n}\nprint(paste(\"Number of movies with negative profit =\", count))\n\n\n\n\n10.3.2 The lapply() function\nThe lapply() function is used to apply a function on each element of a list, and returns a list of the same length.\nFor example, consider the list below:\n\nlist_ex &lt;- list(1, \"apple\", TRUE, list(\"another list\", TRUE))\n\nLet us use the lapply() function to find the class of each element of the list list_ex:\n\nlapply(list_ex, function(x) class(x))\n\n[[1]]\n[1] \"numeric\"\n\n[[2]]\n[1] \"character\"\n\n[[3]]\n[1] \"logical\"\n\n[[4]]\n[1] \"list\"\n\n\n\n\n10.3.3 Practice exercise 6\nSolve practice exercise 5 without using a for loop. Use the lapply() function.\n\nprofit &lt;- lapply(movies, function(x) x$`Worldwide Gross`-x$`Production Budget`)\npositive_wg &lt;- lapply(movies, function(x) x$`Worldwide Gross` &gt; 0)\nsum(profit &lt; 0 & positive_wg &gt; 0, na.rm = TRUE)",
    "crumbs": [
      "R",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>R: Objects</span>"
    ]
  },
  {
    "objectID": "recursion.html",
    "href": "recursion.html",
    "title": "11  R: Recursion",
    "section": "",
    "text": "11.1 Recursion\nRecursion is a method of solving a problem by dividing it into smaller instances of the same problem. Recursion solves such problems by using functions that call themselves from within their own code. This forms a loop, where every time the function is called, it calls itself again and again. However, every time the function calls itself, it checks certain condition(s) which are the stopping condition(s). When such condition(s) are true the function will stop calling itself. These conditions are called the base case of the recursive function.\nEvery recursive function must have at least two cases:\n1. Base case: This is the simplest case that can be answered directly, and the function does not call itself.\n2. Recursive case: This is a relatively more complex case that cannot be answered directly, but can be described as a smaller instance of the same problem. In this case, the function calls itself to answer the smaller problem.\nBelow is an example, where we defined a function that computes the factorial of an integer by recursion.\nfactorial &lt;- function(n) {\n  \n  # Base case\n  if (n == 1) return(1)    \n  \n  # Recursive case\n  return(n * factorial(n - 1)) \n}\nfactorial(5)\n\n[1] 120\nIn the above example, the case \\(n=1\\) is the base case, where the function does not need to call itself, and returns 1. All other cases, where \\(n&gt;1\\), and \\(n \\in  \\mathbb{Z}\\) are recursive cases, where the function calls itself with a smaller instance of the same problem.\nA recursive function must satisfy the following conditions:\nExample: Write a recursive function that returns the \\(n^{th}\\) term of the Fibonacci sequence, where \\(n\\) is an integer, and \\(n&gt;0\\). In a Fibonacci sequence, each number is the sum of the preceding two numbers, and the sequence starts from \\(0,1\\). The sequence is as follows:\n\\(0, 1, 1, 2, 3, 5, 8, 13, 21, ...\\)\nfibonacci &lt;- function(n) {\n  # Base case\n  if (n == 0 | n == 1) return(n)\n  \n  #Recursive case\n  return(fibonacci(n - 1) + fibonacci(n - 2))  \n}\n#The function `fibonacci` prints the n+1th term of the fibonacci sequence when `n` is passed as an argument. Thus, we need to reduce `n` by 1 to print the nth term of the sequence. The function `nth_term` reduces `n` by 1 before passing `n` to the function `fibonacci()`.\nnth_term &lt;- function(N) {\n  fibonacci(N - 1)\n}\nnth_term(7)\n\n[1] 8",
    "crumbs": [
      "R",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>R: Recursion</span>"
    ]
  },
  {
    "objectID": "recursion.html#recursion",
    "href": "recursion.html#recursion",
    "title": "11  R: Recursion",
    "section": "",
    "text": "There must be a case for all valid inputs.\nThere must be a base case that makes no recursive calls.\nWhen the function makes a recursive call, it should be to a simpler instance and make forward progress towards the base case.\n\n\n\n\n\n11.1.1 Practice exercise 1\nWrite a recursive function that computes the sum of squares of the first \\(N\\) natural numbers, where \\(N\\) is a parameter to the function.\n\nsquares &lt;- function(N)\n{\n  \n  # Base case\n  if(N == 1)  return(1)\n  \n  # Recursive case\n  return(N ** 2 + squares(N - 1))\n}\nsquares(10)\n\n\n\n11.1.2 Practice exercise 2\nWrite a function that counts the occurrence of digit \\(k\\) in a given integer \\(n\\) using recursion. The function has \\(n\\) and \\(k\\) as parameters.\n\nfreq_digits &lt;- function(n, d) {\n  if (n == 0) return(0)\n  digit &lt;- n %% 10\n  n_int &lt;- as.integer(n / 10)\n  if (digit == d) return(1 + freq_digits(n_int, d))\n  return(freq_digits(n_int, d))\n}\nfreq_digits(8670800,0)\n\n\n\n11.1.3 Practice exercise 3\nUse recursion to write a function that accepts a word as an argument, and returns TRUE if the word is a palindrome, otherwise returns FALSE.\n\nword&lt;-'racecar'\npalindrome &lt;- function(word) {\n  if(nchar(word) &lt;= 1) return(TRUE)\n  if(substr(word, 1, 1) == substr(word, nchar(word), nchar(word))) {\n    palindrome(substr(word, 2, nchar(word) - 1))\n  } else return(FALSE)\n}\npalindrome(word)",
    "crumbs": [
      "R",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>R: Recursion</span>"
    ]
  },
  {
    "objectID": "recursion.html#space-occupied-by-recursive-calls",
    "href": "recursion.html#space-occupied-by-recursive-calls",
    "title": "11  R: Recursion",
    "section": "11.2 Space occupied by recursive calls",
    "text": "11.2 Space occupied by recursive calls\nStack memory is a memory usage mechanism that allows the system memory to be used as temporary data storage that behaves as a first-in-last-out buffer.\nWhen a recursive function is called in a programming language, the stack memory is used to keep track of each invocation of the function. Let’s break down how stack memory is occupied during the execution of a recursive function:\n\n11.2.1 Function Call\nWhen a recursive function is called, a new stack frame is created on the call stack. The parameters, local variables, and return address are stored in this stack frame.\n\n\n11.2.2 Nested Calls\nIf the recursive function makes another call to itself, a new stack frame is created for the new invocation. This process continues as long as the base case is not reached.\n\n\n11.2.3 Stack Frames in Memory\nEach stack frame is pushed onto the top of the call stack, forming a chain of frames. The stack grows deeper with each recursive call.\n\n\n11.2.4 Local Variables and Parameters\nEach invocation has its own set of local variables and parameters stored in its respective stack frame. These values are separate and independent for each level of recursion.\n\n\n11.2.5 Return Addresses\nThe return address of each invocation is stored in its stack frame. When a function call completes, the program knows where to return by using this address.\n\n\n11.2.6 Base Case\nThe recursion continues until the base case is reached. The base case is a condition that, when met, stops the recursive calls and starts unwinding the call stack.\n\n\n11.2.7 Unwinding the Stack\n\nAs the base case is reached, the recursive calls start to complete, and the stack frames are popped off the call stack.\nThe return values are used to compute the final result as the stack unwinds.\n\n\n\n11.2.8 Memory Deallocation\n\nAs each stack frame is popped off, the memory occupied by that frame is deallocated.\nThis process continues until the initial function call is reached.\n\nThe function CStack_info() can be used to retrieve the stack memory occupied by the recursive calls. If the function is recursively called so many times such that the stack usage limit is reached, the program stops indicating a stack overflow error.",
    "crumbs": [
      "R",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>R: Recursion</span>"
    ]
  },
  {
    "objectID": "recursion.html#recursion-vs-iteration",
    "href": "recursion.html#recursion-vs-iteration",
    "title": "11  R: Recursion",
    "section": "11.3 Recursion vs iteration",
    "text": "11.3 Recursion vs iteration\nRecursion is typically used when the problem is naturally recursive (for e.g., generating a Fibonacci sequence), or the data is naturally recursive ( for e.g., filesystem). Recursive solutions can be easy to read and understand as compared to the corresponding iterative solution.\nOne downside of recursion is that it may take more space than an iterative solution. Building up a stack of recursive calls consumes memory temporarily, and the stack is limited in size, which may become a limit on the size of the problem that the recursive implementation can solve.\nIn the factorial examples below, we compare the stack memory occupied in case of recursion and iteration. Note that the space occupied continues to increase in case of recursion while remains a constant in case of iteration. The units of the size and current attributes are bytes.\n\n# Finding factorial of an integer with recursion\n\nfactorial_recursion &lt;- function(n) {\n  \n  if (n == 1) return(1)    \n  print(Cstack_info())\n  return(n * factorial(n - 1)) \n}\nfactorial_recursion(5)\n\n      size    current  direction eval_depth \n  15938355     299504          1         40 \n\n\n[1] 120\n\n\n\n# Finding factorial of an integer with iteration\n\nfactorial_iteration &lt;- function(n) {\n  fac &lt;- 1\n  for (i in 1:n) {\n    fac &lt;- fac*i\n    print(Cstack_info())\n  } \n  return(fac)\n}\nfactorial_iteration(5)\n\n      size    current  direction eval_depth \n  15938355     314896          1         39 \n      size    current  direction eval_depth \n  15938355     314896          1         39 \n      size    current  direction eval_depth \n  15938355     314896          1         39 \n      size    current  direction eval_depth \n  15938355     314896          1         39 \n      size    current  direction eval_depth \n  15938355     314896          1         39 \n\n\n[1] 120\n\n\n\n11.3.1 Time Complexity\n\nThere are \\(O(N)\\) recursive calls in our recursive approach, and each call uses \\(O(1)\\) operations. Thus, the time complexity of factorial using recursion is \\(O(N)\\).\nThere are \\(O(N)\\) iterations of the loop in our iterative approach, so its time complexity is also \\(O(N)\\).\n\nThough both the programs’ theoretical time complexity is the same, a recursive program will take more time to execute due to the overhead of function calls, which is much higher than that of iteration.\n\n\n11.3.2 Space Complexity\n\nIn the recursive program, due to each recursive call, some memory gets allocated in the stack to store parameters and local variables. As there are \\(O(N)\\) recursive calls, the space complexity using recursion is \\(O(N)\\).\nNo extra memory gets allocated in the iterative program, so its space complexity is \\(O(1)\\).\n\n\n\n11.3.3 Strengths and Weaknesses of Recursion and Iteration\n\n11.3.3.1 Iteration\nStrengths:\n\nIteration can be used to repeatedly execute a set of statements without the overhead of function calls and without using stack memory.\nIteration is faster and more efficient than recursion.\nIt’s easier to optimize iterative codes.\n\nWeaknesses:\n\nIn loops, we can go only in one direction, i.e., we can’t go or transfer data from the current state to the previous state that has already been executed.\nIt’s difficult to traverse trees/graphs using loops.\n\n\n\n11.3.3.2 Recursion\nStrengths:\n\nIt’s easier to code the solution using recursion when the solution of the current problem is dependent on the solution of smaller similar problems.\nRecursive codes are smaller and easier to understand.\nWe can pass information to the next state in the form of parameters and return information to the previous state in the form of the return value.\nIt’s a lot easier to perform operations on trees and graphs using recursion.\n\nWeaknesses:\n\nThe simplicity of recursion comes at the cost of time and space efficiency.\nIt is much slower than iteration due to the overhead of function calls and control shift from one function to another.\nIt requires extra memory on the stack for each recursive call. This memory gets de-allocated when function execution is over.\nIt is difficult to optimize a recursive code, and they generally have higher time complexity than iterative codes due to overlapping sub-problems.",
    "crumbs": [
      "R",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>R: Recursion</span>"
    ]
  },
  {
    "objectID": "Datasets.html",
    "href": "Datasets.html",
    "title": "Appendix A — Assignment templates and Datasets",
    "section": "",
    "text": "Assignment templates and datasets used in the book can be found here",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Assignment templates and Datasets</span>"
    ]
  }
]